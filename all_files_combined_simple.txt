

==== public/css/styles.css ====

/* public/css/styles.css */

/* Define CSS Variables for Colors */
:root {
    --primary-color: #005a32; /* Dark Green */
    --neutral-color: #000000; /* Black */
    --accent-color: #ffffff; /* White */
    --background-color: #f0f0f0; /* Light Gray */
    --footer-bg-color: #f5fef9; /* Footer Background Color */
    --footer-heading-color: #2b6f36; /* Footer Heading Color */
    --footer-text-color: #9fa4a5; /* Footer Text Color */
    --hover-animation: scale(1.05); /* Animation for hover */
    --header-font: 'Poppins', sans-serif;
}

/* General Styles */
body {
    background-color: var(--background-color);
    font-family: var(--header-font);
    font-size: 1rem;
    color: var(--neutral-color);
    margin: 0;
    padding: 0;
}

html, body {
    height: 100%;
}

/* Navbar Customization */
.navbar {
    background-color: var(--primary-color) !important;
    padding: 15px 10px;
}

/* Adjust Navbar for Flexbox */
.navbar {
    flex-shrink: 0;
}

.navbar-brand {
    color: var(--accent-color) !important;
    font-size: 1.5rem;
    font-weight: 700;
}

/* Main Content Adjustments */
main {
    flex-grow: 1;
}

/* Header Styles */
h2 {
    font-family: var(--header-font);
    font-size: 2rem;
    color: var(--primary-color);
    font-weight: 700;
}

h3 {
    font-family: var(--header-font);
    font-size: 1.75rem;
    color: var(--primary-color);
    font-weight: 700;
}

h5.card-title {
    font-family: var(--header-font);
    font-size: 1.25rem;
    color: var(--primary-color);
    font-weight: 600;
}

/* Button Styles */
.btn-primary {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
    color: var(--accent-color);
    transition: transform 0.3s, background-color 0.3s, border-color 0.3s;
}

.btn-primary:hover,
.btn-primary:focus {
    transform: var(--hover-animation);
    background-color: var(--primary-color);
    border-color: var(--primary-color);
    color: var(--accent-color);
}

.btn-secondary {
    background-color: #6c757d;
    border-color: #6c757d;
    color: var(--accent-color);
    transition: transform 0.3s, background-color 0.3s, border-color 0.3s;
}

.btn-secondary:hover,
.btn-secondary:focus {
    transform: var(--hover-animation);
    background-color: #5a6268;
    border-color: #545b62;
    color: var(--accent-color);
}

.btn-neutral {
    background-color: #6c757d;
    border-color: #6c757d;
    color: var(--accent-color);
    transition: transform 0.3s, background-color 0.3s, border-color 0.3s;
}

.btn-neutral:hover,
.btn-neutral:focus {
    transform: var(--hover-animation);
    background-color: #5a6268;
    border-color: #545b62;
    color: var(--accent-color);
}

/* Facebook Blue Color */
.facebook-button {
    background-color: #1877F2; /* Facebook blue */
    border-color: #1877F2;
    color: white;
}

.facebook-button:hover,
.facebook-button:focus {
    background-color: #166FE5; /* Slightly darker blue on hover */
    border-color: #166FE5;
    color: white;
}

/* Hidden Class */
.hidden {
    display: none !important;
}

/* Booking Steps */
.booking-step.hidden {
    display: none;
}

.booking-step:not(.hidden) {
    display: block;
}

.booking-step {
    margin-top: 1rem;
    margin-bottom: 60px; /* Added margin to create space between content and footer */
}

/* Date Option Cards */
.date-option {
    cursor: pointer;
    transition: transform 0.3s, box-shadow 0.3s;
    border: 2px solid transparent;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.date-option.selected {
    border-color: var(--primary-color);
    background-color: rgba(0, 90, 50, 0.1); /* Light green background */
    box-shadow: 0 0 10px rgba(0, 90, 50, 0.3);
}

.date-option.selected::after {
    content: '\f00c'; /* Font Awesome checkmark */
    font-family: 'Font Awesome 6 Free';
    font-weight: 900;
    position: absolute;
    top: 10px;
    right: 10px;
    color: var(--primary-color);
    font-size: 1.5rem;
}

/* Ensure date-option has relative positioning */
.date-option {
    position: relative;
}


.date-option:hover {
    transform: var(--hover-animation);
}


/* Custom Date Picker Specific Styles */
.custom-date-picker .form-control {
    cursor: pointer;
    background-color: transparent;
    border: none;
    border-bottom: 1px solid #ccc;
    text-align: center;
}

.custom-date-picker .form-control:focus {
    outline: none;
    box-shadow: none;
    border-color: var(--primary-color);
}

.custom-date-picker .form-control.mt-2 {
    margin-top: 10px;
}

.custom-date-picker.selected {
    border-color: var(--primary-color);
    box-shadow: 0 0 10px rgba(0, 90, 50, 0.3);
}

.custom-date-picker:hover {
    transform: var(--hover-animation);
}

/* Selected Info Cards */
.selected-info-card {
    border: 2px solid var(--primary-color);
    background-color: var(--accent-color);
    transition: transform 0.3s, box-shadow 0.3s;
    cursor: default;
}

.selected-info-card:hover {
    transform: none;
    box-shadow: none;
}

.selected-info-card .card-title {
    color: var(--primary-color);
}

.selected-info-card .card-text {
    font-size: 1.25rem;
    font-weight: bold;
}

/* Visual Divider */
.divider {
    border-top: 1px solid #ccc;
    margin: 30px 0;
}

/* Slot Card Styling */
.slot-card {
    cursor: pointer;
    transition: transform 0.3s, box-shadow 0.3s;
    border: none;
    border-radius: 0.5rem;
    margin-bottom: 20px;
    background-color: var(--accent-color);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 15px;
    height: 100%;
    color: var(--neutral-color);
}

.slot-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
}

.slot-card .book-now-button {
    background-color: var(--primary-color);
    color: var(--accent-color);
    border: none;
    width: 100%;
    transition: transform 0.3s, background-color 0.3s, border-color 0.3s;
}

.slot-card .book-now-button:hover,
.slot-card .book-now-button:focus {
    transform: var(--hover-animation);
    background-color: var(--primary-color);
    color: var(--accent-color);
}

/* Number of People Buttons */
.num-people-button {
    min-width: 40px;
    margin-right: 5px;
    transition: background-color 0.3s, color 0.3s, border-color 0.3s;
}

.num-people-button.active {
    background-color: var(--primary-color);
    color: var(--accent-color);
    border-color: var(--primary-color);
}

.num-people-button.red-border {
    border-color: #dc3545;
}

.num-people-button.green-border {
    border-color: #198754;
}

/* Error Messages */
.text-danger {
    font-size: 0.875rem;
}

/* Input Validation Styles */
input:invalid,
select:invalid {
    border-color: #dc3545;
}

input:valid,
select:valid {
    border-color: #198754;
}

/* Responsive Adjustments */
@media (max-width: 576px) {
    .date-option .card-body {
        padding: 10px;
    }

    .date-option .card-title {
        font-size: 1rem;
    }

    .date-option .card-text {
        font-size: 0.875rem;
    }

    /* Center footer content on mobile devices */
    .footer .row > div {
        text-align: center;
    }
    .footer .social-icons {
        justify-content: center;
    }
    .footer .social-icons a {
        margin-right: 15px;
    }

    /* Adjust progress bar font size */
    .progress-bar {
        font-size: 0.8rem;
    }
}

/* Customize the progress bar */
.progress {
    background-color: transparent; /* Remove the background color */
}


/* Footer Styling */
.footer {
    background-color: var(--footer-bg-color);
    color: var(--footer-text-color);
    border-top: 1px solid var(--primary-color); /* Reduced thickness */
    margin-top: 40px; /* Space above the footer */
    padding-top: 20px; /* Padding inside the footer */
    padding-bottom: 15px; /* Reduced padding */
}

.footer-heading {
    font-size: 1rem; /* Reduced from 1.25rem */
    margin-bottom: 1rem;
    color: var(--footer-heading-color);
    font-weight: 600;
}

.footer a {
    color: var(--footer-text-color);
    text-decoration: none;
}

.footer a:hover {
    color: var(--footer-heading-color);
    text-decoration: none;
}

.footer p,
.footer a {
    font-size: 0.9rem; /* Reduced font size */
}

.footer img {
    max-width: 80%; /* Reduced logo size */
    height: auto;
}

.social-icons a {
    margin-right: 15px;
    color: var(--primary-color);
    display: flex;
    align-items: center;
}

.social-icons a:last-child {
    margin-right: 0;
}

.social-icons i,
.social-icons svg {
    font-size: 24px;
    fill: var(--primary-color);
}

.line-icon {
    width: 24px;
    height: 24px;
    fill: var(--primary-color);
}

.social-icons {
    display: flex;
    align-items: center;
}

.footer p i {
    color: var(--footer-heading-color);
    margin-right: 5px;
}

.footer .row > div {
    display: flex;
    flex-direction: column;
}

.footer .row > div p {
    flex-grow: 1;
}

/* Adjust Footer for Flexbox */
.footer {
    flex-shrink: 0;
}

/* Remove top margin from footer */
.footer.mt-auto {
    margin-top: auto;
}

/* Confirm Booking Button Styles */
.btn-confirm {
    background-color: #6c757d; /* Gray when disabled */
    border-color: #6c757d;
    color: var(--accent-color);
    cursor: not-allowed;
    pointer-events: none;
}

.btn-confirm.enabled {
    background-color: #198754; /* Green when enabled */
    border-color: #198754;
    color: var(--accent-color);
    cursor: pointer;
    pointer-events: auto;
}

.btn-confirm.enabled:hover,
.btn-confirm.enabled:focus {
    background-color: #157347; /* Darker green on hover */
    border-color: #146c43;
    color: var(--accent-color);
}

/* Customize the progress bar */
.progress {
    margin-top: 0;
}

.progress-bar {
    background-color: var(--primary-color);
    font-size: 1rem;
    font-weight: bold;
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Hide progress bar on confirmation screen */
#confirmation-section + .progress {
    display: none;
}

/* Confirmation Section Spacing */
#confirmation-section {
    margin-bottom: 60px; /* Space between the confirmation content and footer */
}

/* Footer Logo */
.footer img {
    background-color: transparent;
}

/* Responsive Adjustments */
@media (max-width: 576px) {
    .progress-bar {
        font-size: 0.7rem; /* Reduced font size */
        padding: 0.375rem 0; /* Adjust padding if necessary */
    }
    
    /* Reduce spacing above and below the progress bar */
    .progress.mb-4 {
        margin-bottom: 1rem; /* Adjust as needed */
    }
    
    /* Adjust header sizes */
    h2 {
        font-size: 1.5rem; /* Reduce from 2rem */
    }
    
    h3 {
        font-size: 1.25rem; /* Reduce from 1.75rem */
    }
}


/* Sticky Header */
.sticky-top {
    background-color: var(--background-color); /* Use the app's background color */
    z-index: 1030; /* Ensure it stays on top */
}

/* Style the divider inside the sticky header */
#sticky-divider {
    border-top: 1px solid #ccc;
    margin: 10px 0 0 0; /* Adjust margins as needed */
}


/* Adjust spacing and alignment */
.sticky-top .d-flex.align-items-center {
    margin-top: 0;
    padding-top: 0;
}

/* Adjust progress bar margin */
.sticky-top .progress {
    margin-bottom: 0; /* Remove margin below the progress bar */
}


/* Reduce spacing */
.booking-step {
    margin-top: 0.5rem; /* Reduced from 1rem */
    margin-bottom: 40px; /* Adjust as needed */
}

/* Adjust progress bar margin */
.progress.mb-4 {
    margin-bottom: 1rem;
}

/* Custom Select Styles */
.form-select {
    background-color: var(--accent-color);
    border-color: var(--primary-color);
    color: var(--neutral-color);
    transition: background-color 0.3s, border-color 0.3s;
}

.form-select:focus {
    background-color: var(--primary-color);
    color: var(--accent-color);
    border-color: var(--primary-color);
    box-shadow: none;
}

.form-select option {
    background-color: var(--accent-color);
    color: var(--neutral-color);
}

.form-select option:checked,
.form-select option:selected {
    background-color: var(--primary-color);
    color: var(--accent-color);
}


.container {
    margin-top: 10px; /* Adjust the value as needed */
    padding-top: 0; /* Remove padding if not needed */
}

/* Adjust header sizes */
h2 {
    margin-top: 1rem; /* Adjust as needed */
}

h3 {
    margin-top: 0.5rem; /* Adjust as needed */
}
/* Adjust margins for elements within booking steps */
.booking-step p.text-center {
    margin-bottom: 1rem;
}

/* Adjust back button to align with progress bar */
#back-button {
    height: 30px; /* Match the progress bar height */
    padding: 0 12px; /* Adjust padding as needed */
}


/* Available Slots Header within Sticky Header */
#available-slots-header {
    margin-top: 5px; /* Small space above */
    font-size: 1rem; /* Smaller font size */
    font-weight: bold; /* Make the text bold */
    color: var(--primary-color);
    white-space: nowrap; /* Prevent wrapping on larger screens */
    overflow: hidden;
    text-overflow: ellipsis;
}

#available-slots-header .fa-calendar-alt {
    color: var(--primary-color);
    font-size: 1rem; /* Match the text size */
}

/* Adjust the divider margin */
#sticky-divider {
    margin: 5px 0; /* Reduce margins */
}

/* Ensure text wraps on small screens */
@media (max-width: 576px) {
    #available-slots-header {
        font-size: 0.9rem; /* Slightly smaller on mobile */
        padding: 0 10px; /* Add horizontal padding */
        white-space: normal; /* Allow text to wrap */
    }
}




==== public/js/main.js ====

// public/js/main.js

'use strict';

// Initialize Luxon for date handling
const DateTime = luxon.DateTime;

// Global variables to store booking data
let selectedDate = '';
let selectedTimeSlot = '';
let maxDuration = 1;
let currentStepNumber = 1;

// Inactivity timeout (e.g., 15 minutes)
const INACTIVITY_TIMEOUT = 15 * 60 * 1000; // 15 minutes in milliseconds
let inactivityTimer;

// Function to reset the inactivity timer
function resetInactivityTimer() {
    clearTimeout(inactivityTimer);
    inactivityTimer = setTimeout(logoutUser, INACTIVITY_TIMEOUT);
}

// Function to log out the user
function logoutUser() {
    alert('You have been logged out due to inactivity.');
    // Clear user data
    localStorage.clear();
    // Redirect to login section
    document.getElementById('booking-section').classList.add('hidden');
    document.getElementById('confirmation-section').classList.add('hidden');
    document.getElementById('login-section').classList.remove('hidden');
    // Hide logout button
    document.getElementById('logout-button').style.display = 'none';
}

// Reset the timer on various user interactions
['click', 'mousemove', 'keydown', 'scroll', 'touchstart'].forEach(event => {
    document.addEventListener(event, resetInactivityTimer);
});

// Start the inactivity timer when the page loads
document.addEventListener('DOMContentLoaded', () => {
    resetInactivityTimer();
});

// Initialize booking flow after successful login
function initializeBooking() {
    // Hide login section, show booking section
    document.getElementById('login-section').classList.add('hidden');
    document.getElementById('booking-section').classList.remove('hidden');

    // Start with Step 1
    showStep(1);

    // Initialize date options
    initializeDateOptions();

    // Update step headers
    updateStepHeaders(1);
}

// Function to show a specific step
function showStep(stepNumber) {
    currentStepNumber = stepNumber;
    // Hide all steps
    const steps = document.querySelectorAll('.booking-step');
    steps.forEach(step => step.classList.add('hidden'));

    // Show the requested step
    const step = document.getElementById(`step-${stepNumber}`);
    if (step) {
        step.classList.remove('hidden');
    }

    // Update step headers
    updateStepHeaders(stepNumber);

    // Show or hide the back button
    const backButton = document.getElementById('back-button');
    if (stepNumber > 1) {
        backButton.style.display = 'block';
        backButton.onclick = () => {
            showStep(stepNumber - 1);
        };
    } else {
        backButton.style.display = 'none';
    }

    // Show or hide the "Available slots for" text
    const availableSlotsHeader = document.getElementById('available-slots-header');
    if (availableSlotsHeader) {
        if (stepNumber === 2) {
            availableSlotsHeader.style.display = 'block';
            // Update the date in the header
            document.getElementById('selected-date-display-header').textContent = DateTime.fromISO(selectedDate, { zone: 'Asia/Bangkok' }).toFormat('dd/MM/yyyy');
        } else {
            availableSlotsHeader.style.display = 'none';
        }
    }
}

// Function to update progress bar based on current step
function updateStepHeaders(currentStep) {
    const progressBar = document.getElementById('progress-bar');
    let progressPercentage = 0;
    let stepText = '';

    switch (currentStep) {
        case 1:
            progressPercentage = 33;
            stepText = 'Step 1: Select Date';
            break;
        case 2:
            progressPercentage = 66;
            stepText = 'Step 2: Select Time Slot';
            break;
        case 3:
            progressPercentage = 100;
            stepText = 'Step 3: Provide Details';
            break;
        default:
            progressPercentage = 0;
            stepText = '';
    }

    progressBar.style.width = `${progressPercentage}%`;
    progressBar.setAttribute('aria-valuenow', progressPercentage);
    progressBar.textContent = stepText;
}

// Initialize date options in Step 1
function initializeDateOptions() {
    const today = DateTime.now().setZone('Asia/Bangkok');
    const dateOptions = document.querySelectorAll('.date-option');

    // Exclude the custom date picker from the predefined date options
    const predefinedDateOptions = Array.from(dateOptions).filter(
        card => !card.classList.contains('custom-date-picker')
    );

    predefinedDateOptions.forEach(card => {
        const offset = parseInt(card.getAttribute('data-offset'));
        if (isNaN(offset)) {
            console.error('Invalid offset:', card.getAttribute('data-offset'));
            return;
        }
        const date = today.plus({ days: offset });
        card.querySelector('.date-text').textContent = date.toFormat('dd/MM/yyyy');

        if (offset === 2) {
            card.querySelector('.day-after-text').textContent = date.toFormat('cccc');
        }

        // Add event listener
        card.addEventListener('click', () => {
            // Remove 'selected' class from all cards
            dateOptions.forEach(c => c.classList.remove('selected'));

            // Add 'selected' class to clicked card
            card.classList.add('selected');

            selectedDate = date.toISODate();
            proceedToTimeSelection();
        });
    });

    // Handle custom date picker
    const customDateInput = document.getElementById('custom-date');
    const customDateDisplay = document.getElementById('custom-date-display');
    const customDatePickerCard = document.getElementById('custom-date-picker');

    // Initialize Flatpickr
    let customFlatpickrInstance = flatpickr(customDateInput, {
        dateFormat: "yyyy-MM-dd",
        minDate: "today",
        onChange: function(selectedDates, dateStr) {
            if (dateStr) {
                // Remove 'selected' class from all cards
                dateOptions.forEach(c => c.classList.remove('selected'));
                customDatePickerCard.classList.add('selected');

                // Ensure the date is in ISO format
                selectedDate = DateTime.fromJSDate(selectedDates[0]).toISODate();

                // Update the display with the selected date
                customDateDisplay.textContent = DateTime.fromISO(selectedDate).toFormat('dd/MM/yyyy');

                proceedToTimeSelection();
            }
        }
    });

    // Open Flatpickr when card is clicked
    customDatePickerCard.addEventListener('click', function(event) {
        customFlatpickrInstance.open();
    });
}

function proceedToTimeSelection() {
    // Update selected date display
    const selectedDateDisplay = DateTime.fromISO(selectedDate, { zone: 'Asia/Bangkok' });
    if (!selectedDateDisplay.isValid) {
        console.error('Invalid selectedDate:', selectedDate);
        alert('Invalid date selected. Please try again.');
        showStep(1);
        return;
    }

    // Show Step 2
    showStep(2);

    // Fetch available slots
    fetchAvailableSlots(selectedDate);
}

// Fetch available slots from backend
function fetchAvailableSlots(date) {
    const availableSlotsDiv = document.getElementById('available-slots');
    const loadingSpinner = document.getElementById('loading-spinner');

    // Show loading spinner
    loadingSpinner.style.display = 'block';
    availableSlotsDiv.innerHTML = '';

    const token = localStorage.getItem('token'); // Retrieve JWT

    fetch(`/api/bookings/available-slots?date=${date}`, {
        headers: {
            'Authorization': `Bearer ${token}`
        }
    })
    .then(async res => {
        const contentType = res.headers.get('content-type');
        if (!res.ok) {
            if (contentType && contentType.includes('application/json')) {
                const errorData = await res.json();
                throw new Error(errorData.message || `Server responded with status ${res.status}`);
            } else {
                throw new Error(`Server responded with status ${res.status}`);
            }
        }
        if (contentType && contentType.includes('application/json')) {
            return res.json();
        } else {
            throw new Error('Received non-JSON response from server.');
        }
    })
    .then(data => {
        loadingSpinner.style.display = 'none';
        if (data.success) {
            renderAvailableSlots(data.availableSlots);
        } else {
            availableSlotsDiv.innerHTML = `<p class="text-danger">${data.message}</p>`;
        }
    })
    .catch(err => {
        loadingSpinner.style.display = 'none';
        availableSlotsDiv.innerHTML = `<p class="text-danger">Failed to load available slots: ${err.message}</p>`;
        console.error('Error fetching available slots:', err);
    });
}

// Render available slots on the page
function renderAvailableSlots(slots) {
    const availableSlotsDiv = document.getElementById('available-slots');
    availableSlotsDiv.innerHTML = '';

    if (slots.length === 0) {
        availableSlotsDiv.innerHTML = `
            <div class="alert alert-warning d-flex align-items-center" role="alert">
                <i class="fas fa-calendar-times fa-2x me-3"></i>
                <div>
                    <p class="mb-2">Oops! Looks like we're fully booked on this date.</p>
                    <button class="btn btn-primary btn-sm" onclick="showStep(1)">
                        <i class="fas fa-arrow-left me-2"></i>Pick Another Date
                    </button>
                </div>
            </div>
        `;
        return;
    }
    

    slots.forEach(slot => {
        const slotCol = document.createElement('div');
        slotCol.className = 'col-md-4 col-sm-6 mb-4';

        const slotCard = document.createElement('div');
        slotCard.className = 'card slot-card h-100';

        slotCard.innerHTML = `
            <div class="card-body d-flex flex-column">
                <h5 class="card-title fw-bold">
                    <i class="fas fa-clock me-2"></i>${slot.startTime}
                </h5>
                <p class="card-text">
                    Available for up to ${slot.maxDuration} hour(s)
                </p>
                <div class="mt-auto">
                    <button class="btn btn-primary book-now-button">Select</button>
                </div>
            </div>
        `;

        const bookNowButton = slotCard.querySelector('.book-now-button');
        bookNowButton.addEventListener('click', () => {
            selectedTimeSlot = slot.startTime;
            maxDuration = slot.maxDuration;
            proceedToDetailsForm();
        });

        slotCol.appendChild(slotCard);
        availableSlotsDiv.appendChild(slotCol);
    });
}

// Proceed to Step 3: Provide Details
function proceedToDetailsForm() {
    // Show Step 3
    showStep(3);

    // Reset confirm button
    const confirmButton = document.getElementById('confirm-booking-button');
    confirmButton.disabled = true;
    confirmButton.innerHTML = '<i class="fas fa-check-circle me-2"></i>Confirm Booking';
    confirmButton.classList.remove('enabled');

    // Update final date and time display
    document.getElementById('final-date').textContent = DateTime.fromISO(selectedDate).toFormat('dd/MM/yyyy');
    document.getElementById('final-time').textContent = selectedTimeSlot;

    // Initialize duration options
    initializeDurationOptions();

    // Prefill phone number if available
    prefillPhoneNumber();

    // Attach event listener to confirm booking button
    confirmButton.addEventListener('click', submitBooking);

    // Validate form on input changes
    document.getElementById('phone-number').addEventListener('input', validateForm);
    document.getElementById('duration-select').addEventListener('change', () => {
        calculateEndTime();
        validateForm();
    });
    document.querySelectorAll('.num-people-button').forEach(button => {
        button.addEventListener('click', validateForm);
    });

    // Reset form fields
    resetNumberOfPeopleSelection();
    validateForm();

    // Calculate initial end time
    calculateEndTime();
}

// Initialize duration options based on maxDuration
function initializeDurationOptions() {
    const durationSelect = document.getElementById('duration-select');
    durationSelect.innerHTML = '';
    for (let i = 1; i <= maxDuration; i++) {
        const option = document.createElement('option');
        option.value = i;
        option.textContent = `${i} hour(s)`;
        durationSelect.appendChild(option);
    }
}

// Calculate and display the end time
function calculateEndTime() {
    const duration = parseInt(document.getElementById('duration-select').value) || 0;
    if (duration > 0) {
        const startTime = DateTime.fromFormat(selectedTimeSlot, 'HH:mm', { zone: 'Asia/Bangkok' });
        if (!startTime.isValid) {
            console.error('Invalid start time:', selectedTimeSlot);
            document.getElementById('end-time-display').innerHTML = '<strong>--:--</strong>';
            return;
        }
        const endTime = startTime.plus({ hours: duration });
        document.getElementById('end-time-display').innerHTML = `<strong>${endTime.toFormat('HH:mm')}</strong>`;
    } else {
        document.getElementById('end-time-display').innerHTML = '<strong>--:--</strong>';
    }
}

// Prefill phone number from localStorage
function prefillPhoneNumber() {
    const phoneNumberInput = document.getElementById('phone-number');
    const prefilledIndicator = document.getElementById('phone-prefilled-indicator');
    const userPhone = localStorage.getItem('phoneNumber');

    if (userPhone) {
        phoneNumberInput.value = userPhone;
        prefilledIndicator.style.display = 'block';
        phoneNumberInput.classList.add('prefilled');
    } else {
        prefilledIndicator.style.display = 'none';
        phoneNumberInput.classList.remove('prefilled');
    }
    validateForm();
}

// Validate form fields to enable/disable Confirm Booking button
function validateForm() {
    const phoneNumber = document.getElementById('phone-number').value.trim();
    const numberOfPeople = document.getElementById('number-of-people').value;
    const duration = document.getElementById('duration-select').value;

    let isValid = true;

    // Validate Duration
    if (duration === '') {
        document.getElementById('duration-error').style.display = 'block';
        isValid = false;
    } else {
        document.getElementById('duration-error').style.display = 'none';
    }

    // Validate Phone Number
    const phoneRegex = /^\+?[0-9\s\-()]{7,15}$/; // Allows +, numbers, spaces, dashes, parentheses
    if (phoneNumber === '') {
        document.getElementById('phone-error').textContent = 'Please enter your phone number.';
        document.getElementById('phone-error').style.display = 'block';
        isValid = false;
    } else if (!phoneRegex.test(phoneNumber)) {
        document.getElementById('phone-error').textContent = 'Please enter a valid phone number.';
        document.getElementById('phone-error').style.display = 'block';
        isValid = false;
    } else {
        document.getElementById('phone-error').style.display = 'none';
    }

    // Validate Number of People
    if (numberOfPeople === '') {
        document.getElementById('people-error').style.display = 'block';
        isValid = false;
    } else {
        document.getElementById('people-error').style.display = 'none';
    }

    const confirmButton = document.getElementById('confirm-booking-button');
    if (isValid) {
        confirmButton.disabled = false;
        confirmButton.classList.add('enabled');
    } else {
        confirmButton.disabled = true;
        confirmButton.classList.remove('enabled');
    }
}

// Handle Number of People Button Clicks
document.querySelectorAll('.num-people-button').forEach(button => {
    button.addEventListener('click', () => {
        // Remove active class from all buttons
        document.querySelectorAll('.num-people-button').forEach(btn => btn.classList.remove('active'));
        // Add active class to the clicked button
        button.classList.add('active');
        // Set the hidden input value
        document.getElementById('number-of-people').value = button.getAttribute('data-value');

        // Update border colors based on selection
        updateNumberOfPeopleBorders();

        validateForm();
    });
});

// Update border colors for Number of People buttons
function updateNumberOfPeopleBorders() {
    const selectedValue = document.getElementById('number-of-people').value;
    const buttons = document.querySelectorAll('.num-people-button');

    if (selectedValue) {
        // If a number is selected, add green border and remove red
        buttons.forEach(btn => {
            btn.classList.remove('red-border');
            btn.classList.add('green-border');
        });
        // Hide error message
        document.getElementById('people-error').style.display = 'none';
    } else {
        // If no selection, add red border and remove green
        buttons.forEach(btn => {
            btn.classList.remove('green-border');
            btn.classList.add('red-border');
        });
        // Show error message
        document.getElementById('people-error').style.display = 'block';
    }
}

// Reset number of people selection
function resetNumberOfPeopleSelection() {
    const buttons = document.querySelectorAll('.num-people-button');
    buttons.forEach(button => button.classList.remove('active'));
    document.getElementById('number-of-people').value = '';
    // Remove any border classes
    buttons.forEach(button => {
        button.classList.remove('red-border', 'green-border');
    });
}

// Submit Booking
function submitBooking() {
    const token = localStorage.getItem('token');
    if (!token) {
        alert('You are not authenticated. Please log in again.');
        return;
    }

    const userId = localStorage.getItem('userId');
    if (!userId) {
        alert('User ID is missing. Please try logging in again.');
        return;
    }

    const userName = localStorage.getItem('name'); // Fetching the user's name
    const email = localStorage.getItem('email'); // Fetching the user's email
    const loginMethod = localStorage.getItem('loginMethod'); // Fetching login method
    const phoneNumber = document.getElementById('phone-number').value.trim();
    const numberOfPeople = parseInt(document.getElementById('number-of-people').value);
    const date = selectedDate;
    const startTime = selectedTimeSlot;
    const duration = parseInt(document.getElementById('duration-select').value);
    const confirmButton = document.getElementById('confirm-booking-button');
    const originalButtonText = confirmButton.innerHTML;

    if (!phoneNumber || isNaN(numberOfPeople) || numberOfPeople < 1) {
        alert('Please provide valid booking details.');
        return;
    }

    // Disable the confirm button and show a spinner
    confirmButton.disabled = true;
    confirmButton.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Confirming...`;

    fetch('/api/bookings/book-slot', {
        method: 'POST',
        headers: { 
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
            userId,
            userName, // Include the user's name in the booking data
            email, // Include the user's email
            phoneNumber,
            numberOfPeople,
            date,
            startTime,
            duration,
            loginMethod // Include login method in booking data if needed
        }),
    })
    .then(async res => {
        const contentType = res.headers.get('content-type');
        if (!res.ok) {
            if (contentType && contentType.includes('application/json')) {
                const errorData = await res.json();
                throw new Error(errorData.message || `Server responded with status ${res.status}`);
            } else {
                throw new Error(`Server responded with status ${res.status}`);
            }
        }
        if (contentType && contentType.includes('application/json')) {
            return res.json();
        } else {
            throw new Error('Received non-JSON response from server.');
        }
    })
    .then(data => {
        if (data.success) {
            // Update localStorage with the latest phone number
            localStorage.setItem('phoneNumber', phoneNumber);

            // Show confirmation
            showConfirmation(data.bookingDetails);
        } else {
            // Re-enable confirm button
            confirmButton.disabled = false;
            confirmButton.innerHTML = originalButtonText;

            alert(data.message || 'Failed to book the slot.');
        }
    })
    .catch(err => {
        // Re-enable confirm button
        confirmButton.disabled = false;
        confirmButton.innerHTML = originalButtonText;

        console.error('Error booking slot:', err);
        alert(`An error occurred while booking: ${err.message}`);
    });
}

// Show Confirmation Step
function showConfirmation(bookingData) {
    // Hide all steps
    const steps = document.querySelectorAll('.booking-step');
    steps.forEach(step => step.classList.add('hidden'));

    // Hide progress bar
    const progressBarContainer = document.querySelector('.progress');
    if (progressBarContainer) {
        progressBarContainer.style.display = 'none';
    }

    // Hide back button
    const backButton = document.getElementById('back-button');
    backButton.style.display = 'none';

    // Show confirmation section
    const confirmationSection = document.getElementById('confirmation-section');
    confirmationSection.classList.remove('hidden');

    const userName = localStorage.getItem('name');
    const date = DateTime.fromISO(selectedDate).toFormat('dd/MM/yyyy');
    const startTime = selectedTimeSlot;
    const duration = parseInt(document.getElementById('duration-select').value);
    const numberOfPeople = parseInt(document.getElementById('number-of-people').value);
    const endTime = DateTime.fromFormat(startTime, 'HH:mm', { zone: 'Asia/Bangkok' }).plus({ hours: duration }).toFormat('HH:mm');

    // Display booking details
    confirmationSection.innerHTML = `
        <h3 class="mb-4">Booking Confirmed!</h3>
        <p>Thank you, <strong>${userName}</strong>, for your booking.</p>
        <p>Booking Details:</p>
        <ul class="list-unstyled">
            <li>Date: ${date}</li>
            <li>Start Time: ${startTime}</li>
            <li>End Time: ${endTime}</li>
            <li>Duration: ${duration} hour(s)</li>
            <li>Number of People: ${numberOfPeople}</li>
        </ul>
        <button class="btn btn-primary mt-3" onclick="promptAnotherBooking()">
            <i class="fas fa-calendar-check me-2"></i>Book Another Slot
        </button>
    `;
}

// Prompt user to make another booking
function promptAnotherBooking() {
    // Reset booking data
    selectedDate = '';
    selectedTimeSlot = '';
    maxDuration = 1;

    // Reset confirm button
    const confirmButton = document.getElementById('confirm-booking-button');
    confirmButton.disabled = true;
    confirmButton.innerHTML = '<i class="fas fa-check-circle me-2"></i>Confirm Booking';
    confirmButton.classList.remove('enabled');

    // Show progress bar
    const progressBarContainer = document.querySelector('.progress');
    if (progressBarContainer) {
        progressBarContainer.style.display = 'block';
    }

    // Hide confirmation section
    document.getElementById('confirmation-section').classList.add('hidden');

    // Start over from Step 1
    initializeBooking();
}

// Initialize the app after successful login
function onLoginSuccess() {
    // Show logout button
    document.getElementById('logout-button').style.display = 'block';

    // Fetch customer data and then initialize booking
    fetchCustomerData().then(() => {
        initializeBooking();
    }).catch(() => {
        // Proceed with booking initialization even if customer data fetch fails
        initializeBooking();
    });
}

// Attach logout functionality
document.getElementById('logout-button').addEventListener('click', () => {
    localStorage.clear();
    // Redirect to login section
    document.getElementById('booking-section').classList.add('hidden');
    document.getElementById('confirmation-section').classList.add('hidden');
    document.getElementById('login-section').classList.remove('hidden');
    // Hide logout button
    document.getElementById('logout-button').style.display = 'none';
});

// Handle login with Google
function handleCredentialResponse(response) {
    const token = response.credential;
    // Send the token to your backend to verify and get user info
    fetch('/api/auth/login/google', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ token: token }),
    })
    .then(async res => {
        const contentType = res.headers.get('content-type');
        if (!res.ok) {
            if (contentType && contentType.includes('application/json')) {
                const errorData = await res.json();
                throw new Error(errorData.message || `Server responded with status ${res.status}`);
            } else {
                throw new Error(`Server responded with status ${res.status}`);
            }
        }
        if (contentType && contentType.includes('application/json')) {
            return res.json();
        } else {
            throw new Error('Received non-JSON response from server.');
        }
    })
    .then(data => {
        if (data.success) {
            // Save user data and token in localStorage
            localStorage.setItem('token', data.token);
            localStorage.setItem('userId', data.userId);
            localStorage.setItem('name', data.name);
            localStorage.setItem('email', data.email);
            localStorage.setItem('loginMethod', 'google');

            onLoginSuccess();
        } else {
            alert(data.message || 'Login failed.');
        }
    })
    .catch(err => {
        console.error('Error during Google login:', err);
        alert(`An error occurred during login: ${err.message}`);
    });
}

// Make handleCredentialResponse globally accessible for Google Sign-In
window.handleCredentialResponse = handleCredentialResponse;

// Handle login with Facebook
function handleFacebookLogin() {
    FB.login(response => {
        if (response.authResponse) {
            const accessToken = response.authResponse.accessToken;

            // Send the access token to your backend to verify and get user info
            fetch('/api/auth/login/facebook', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ accessToken: accessToken }), // Ensure the key is 'accessToken' as expected by the server
            })
            .then(async res => {
                const contentType = res.headers.get('content-type');
                if (!res.ok) {
                    if (contentType && contentType.includes('application/json')) {
                        const errorData = await res.json();
                        throw new Error(errorData.message || `Server responded with status ${res.status}`);
                    } else {
                        throw new Error(`Server responded with status ${res.status}`);
                    }
                }
                if (contentType && contentType.includes('application/json')) {
                    return res.json();
                } else {
                    throw new Error('Received non-JSON response from server.');
                }
            })
            .then(data => {
                if (data.success) {
                    // Save user data and token in localStorage
                    localStorage.setItem('token', data.token);
                    localStorage.setItem('userId', data.userId);
                    localStorage.setItem('name', data.name);
                    localStorage.setItem('email', data.email);
                    localStorage.setItem('loginMethod', 'facebook');

                    onLoginSuccess();
                } else {
                    alert(data.message || 'Login failed.');
                }
            })            
            .catch(err => {
                console.error('Error during Facebook login:', err);
                alert(`An error occurred during login: ${err.message}`);
            });
        } else {
            alert('Facebook login was not successful.');
        }
    }, { scope: 'public_profile,email' });
}

// Event listener for Facebook login button
document.getElementById('facebook-login-button').addEventListener('click', handleFacebookLogin);

// Handle guest login
document.getElementById('guest-login-button').addEventListener('click', () => {
    // Show additional info form
    document.getElementById('login-section').classList.add('hidden');
    document.getElementById('additional-info-section').classList.remove('hidden');
});

// Handle submission of additional info
document.getElementById('submit-additional-info').addEventListener('click', handleGuestLogin);

function handleGuestLogin() {
    const name = document.getElementById('additional-name').value.trim();
    const email = document.getElementById('additional-email').value.trim();
    const phone = document.getElementById('additional-phone').value.trim();

    if (!name || !email || !phone) {
        alert('Please fill out all fields.');
        return;
    }

    // Simulate token and user ID generation
    const fakeToken = 'guest-token-' + Date.now();
    const fakeUserId = 'guest-' + Date.now();

    // Save user data and token in localStorage
    localStorage.setItem('token', fakeToken);
    localStorage.setItem('userId', fakeUserId);
    localStorage.setItem('name', name);
    localStorage.setItem('email', email);
    localStorage.setItem('phoneNumber', phone);
    localStorage.setItem('loginMethod', 'guest');

    // Proceed to booking
    document.getElementById('additional-info-section').classList.add('hidden');
    onLoginSuccess();
}

// Initialize app
document.addEventListener('DOMContentLoaded', () => {
    // Check if user is already logged in
    const token = localStorage.getItem('token');
    if (token) {
        // Assume the user is logged in
        onLoginSuccess();
    }
});

function fetchCustomerData() {
    const token = localStorage.getItem('token');
    const userId = localStorage.getItem('userId');

    return fetch(`/api/customers?userId=${userId}`, {
        headers: {
            'Authorization': `Bearer ${token}`
        }
    })
    .then(async res => {
        const contentType = res.headers.get('content-type');
        if (!res.ok) {
            if (contentType && contentType.includes('application/json')) {
                const errorData = await res.json();
                throw new Error(errorData.message || `Server responded with status ${res.status}`);
            } else {
                throw new Error(`Server responded with status ${res.status}`);
            }
        }
        if (contentType && contentType.includes('application/json')) {
            return res.json();
        } else {
            throw new Error('Received non-JSON response from server.');
        }
    })
    .then(data => {
        if (data.success && data.customerData) {
            // Save phone number in localStorage
            localStorage.setItem('phoneNumber', data.customerData.phoneNumber);
            localStorage.setItem('loginSource', data.customerData.loginSource);
        }
    })
    .catch(err => {
        console.error('Error fetching customer data:', err);
    });
}




==== public/index.html ====

<!-- public/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Meta Tags -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LENGOLF Booking System</title>

    <!-- Bootstrap CSS -->
    <link 
        href="https://cdn.jsdelivr.net/npm/bootstrap@5.3/dist/css/bootstrap.min.css" 
        rel="stylesheet" 
        crossorigin="anonymous"
    >

    <!-- Font Awesome CSS for Icons -->
    <link 
        rel="stylesheet" 
        href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" 
        crossorigin="anonymous"
    />

    <!-- Flatpickr CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/styles.css">

    <!-- Google Fonts -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap">

    <!-- Google Sign-In JavaScript library -->
    <script src="https://accounts.google.com/gsi/client" async defer></script>

    <!-- Facebook SDK -->
    <script async defer crossorigin="anonymous" 
        src="https://connect.facebook.net/en_US/sdk.js#xfbml=1&version=v16.0&appId={{FACEBOOK_APP_ID}}&autoLogAppEvents=1">
    </script>

    <!-- Luxon JS Library -->
    <script src="https://cdn.jsdelivr.net/npm/luxon@3/build/global/luxon.min.js"></script>
</head>
<body>
    <!-- Wrapper for Flexbox -->
    <div class="d-flex flex-column min-vh-100">
        <!-- Navbar -->
        <nav class="navbar navbar-expand-lg navbar-dark">
            <div class="container-fluid">
                <a class="navbar-brand" href="#">LENGOLF Booking</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" 
                    aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <button class="btn btn-secondary ms-auto" id="logout-button" style="display: none;">
                        <i class="fas fa-sign-out-alt me-2"></i>Logout
                    </button>
                </div>
            </div>
        </nav>

        <!-- Main Content -->
        <main class="flex-grow-1">
            <!-- Main Container -->
            <div class="container mt-1 pt-1">
                <!-- Login Section -->
                <div id="login-section" class="text-center">
                    <h2 class="mb-4">Welcome to LENGOLF!</h2>
                    <p>Please choose a login method to start booking your slot.</p>

                    <!-- Centered Google Sign-In Button -->
                    <div class="d-flex justify-content-center">
                        <div
                            id="g_id_onload"
                            data-client_id="{{GOOGLE_CLIENT_ID}}"
                            data-callback="handleCredentialResponse"
                            data-auto_prompt="false"
                        ></div>

                        <div
                            class="g_id_signin mt-3"
                            data-type="standard"
                            data-size="large"
                            data-theme="outline"
                            data-text="sign_in_with"
                            data-shape="rectangular"
                            data-logo_alignment="left"
                        ></div>
                    </div>

                    <hr class="my-4">

                    <!-- Facebook Login Button -->
                    <button id="facebook-login-button" class="btn facebook-button mb-3">
                        <i class="fab fa-facebook-f me-2"></i>Login with Facebook
                    </button>

                    <br>

                    <!-- Guest Login Button -->
                    <button id="guest-login-button" class="btn btn-secondary mb-4">
                        <i class="fas fa-user me-2"></i>Continue as Guest
                    </button>
                </div>

                <!-- Additional Information Form (Hidden by Default) -->
                <div id="additional-info-section" class="mt-5 hidden">
                    <h3 class="text-center mb-4">Please Provide Your Details</h3>
                    <form id="additional-info-form">
                        <div class="mb-3">
                            <label for="additional-name" class="form-label">Name</label>
                            <input type="text" class="form-control" id="additional-name" placeholder="Enter your name" required>
                            <div class="invalid-feedback">
                                Please enter your name.
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="additional-email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="additional-email" placeholder="Enter your email" required>
                            <div class="invalid-feedback">
                                Please enter a valid email address.
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="additional-phone" class="form-label">Phone Number</label>
                            <input type="tel" class="form-control" id="additional-phone" placeholder="Enter your phone number" required>
                            <div class="invalid-feedback">
                                Please enter a valid phone number.
                            </div>
                        </div>
                        <button type="button" id="submit-additional-info" class="btn btn-primary">Submit</button>
                    </form>
                </div>

                <!-- Booking Section -->
                <div id="booking-section" class="mt-5 hidden">
                    <!-- Sticky Header -->
                    <div class="sticky-top">
                        <div>
                            <div class="d-flex flex-column mb-2">
                                <div class="d-flex align-items-center">
                                    <!-- Back Button -->
                                    <button class="btn btn-secondary btn-sm me-2" id="back-button" style="display: none;">
                                        <i class="fas fa-arrow-left me-2"></i>Back
                                    </button>
                                    <!-- Progress Bar -->
                                    <div class="progress flex-grow-1" style="height: 30px;">
                                        <div id="progress-bar" class="progress-bar" role="progressbar" style="width: 66%;" aria-valuenow="66" aria-valuemin="0" aria-valuemax="100">
                                            Step 2: Select Time Slot
                                        </div>
                                    </div>
                                </div>
                                <!-- Available Slots Text (now within sticky header) -->
                                <p class="text-center mb-0" id="available-slots-header" style="display: none;">
                                    <i class="fas fa-calendar-alt me-1"></i>
                                    Available slots for <span id="selected-date-display-header"></span>
                                </p>
                                <!-- Divider -->
                                <div class="divider" id="sticky-divider"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Step 1: Select Date -->
                    <div id="step-1" class="booking-step">
                        <p class="text-center">Choose a date to see available time slots.</p>
                        <div class="row justify-content-center mb-4">
                            <!-- Today Card -->
                            <div class="col-6 col-md-3 mb-3">
                                <div class="card date-option h-100" data-offset="0">
                                    <div class="card-body text-center d-flex flex-column justify-content-center">
                                        <i class="fas fa-calendar-day fa-2x mb-2"></i>
                                        <h5 class="card-title">Today</h5>
                                        <p class="card-text date-text"></p>
                                    </div>
                                </div>
                            </div>
                            <!-- Tomorrow Card -->
                            <div class="col-6 col-md-3 mb-3">
                                <div class="card date-option h-100" data-offset="1">
                                    <div class="card-body text-center d-flex flex-column justify-content-center">
                                        <i class="fas fa-calendar-check fa-2x mb-2"></i>
                                        <h5 class="card-title">Tomorrow</h5>
                                        <p class="card-text date-text"></p>
                                    </div>
                                </div>
                            </div>
                            <!-- Day After Tomorrow Card -->
                            <div class="col-6 col-md-3 mb-3">
                                <div class="card date-option h-100" data-offset="2">
                                    <div class="card-body text-center d-flex flex-column justify-content-center">
                                        <i class="fas fa-calendar-week fa-2x mb-2"></i>
                                        <h5 class="card-title day-after-text"></h5>
                                        <p class="card-text date-text"></p>
                                    </div>
                                </div>
                            </div>
                            <!-- Custom Date Picker Card -->
                            <div class="col-6 col-md-3 mb-3">
                                <div class="card date-option h-100 custom-date-picker" id="custom-date-picker">
                                    <div class="card-body text-center d-flex flex-column justify-content-center">
                                        <i class="fas fa-calendar fa-2x mb-2"></i>
                                        <h5 class="card-title">Select Date</h5>
                                        <p class="card-text" id="custom-date-display">Tap to select</p>
                                        <input type="text" id="custom-date" style="display: none;" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Step 2: Select Time Slot -->
                    <div id="step-2" class="booking-step hidden">
                        <div id="loading-spinner" class="text-center my-5" style="display: none;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-3">Fetching available slots...</p>
                        </div>
                        <div id="available-slots" class="row">
                            <!-- Available slots will be displayed here -->
                        </div>
                    </div>

                    <!-- Step 3: Provide Details -->
                    <div id="step-3" class="booking-step hidden">
                        <!-- Visual Display of Selected Date and Time -->
                        <div class="row mb-4">
                            <div class="col-12 col-md-6 mb-3">
                                <div class="card selected-info-card">
                                    <div class="card-body text-center">
                                        <i class="fas fa-calendar-alt fa-2x mb-2"></i>
                                        <h5 class="card-title">Selected Date</h5>
                                        <p class="card-text" id="final-date"></p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-12 col-md-6 mb-3">
                                <div class="card selected-info-card">
                                    <div class="card-body text-center">
                                        <i class="fas fa-clock fa-2x mb-2"></i>
                                        <h5 class="card-title">Selected Time</h5>
                                        <p class="card-text" id="final-time"></p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Divider -->
                        <div class="divider"></div>

                        <!-- Duration Selection -->
                        <div class="mb-4">
                            <label for="duration-select" class="form-label">Select Duration (hours):</label>
                            <select id="duration-select" class="form-select" required>
                                <!-- Options will be dynamically loaded here -->
                            </select>
                            <div id="duration-error" class="text-danger mt-2" style="display: none;">
                                Please select a duration.
                            </div>
                        </div>
                        <!-- Display End Time -->
                        <div class="mb-4">
                            <label class="form-label">End Time:</label>
                            <p id="end-time-display" class="fs-5"><strong>--:--</strong></p>
                        </div>

                        <!-- Form for phone number and number of people -->
                        <div class="mb-4">
                            <label for="phone-number" class="form-label">Phone Number:</label>
                            <input type="tel" id="phone-number" class="form-control" placeholder="Enter your phone number" required>
                            <small id="phone-prefilled-indicator" class="form-text text-muted" style="display: none;">
                                Prefilled from your account. You can change it if needed.
                            </small>
                            <div id="phone-error" class="text-danger mt-2" style="display: none;">
                                Please enter your phone number.
                            </div>
                        </div>
                        <!-- Number of People Selection -->
                        <div class="mb-4">
                            <label class="form-label d-block">Number of People:</label>
                            <div id="number-of-people-buttons" class="btn-group" role="group" aria-label="Number of People">
                                <button type="button" class="btn btn-outline-secondary num-people-button" data-value="1">1</button>
                                <button type="button" class="btn btn-outline-secondary num-people-button" data-value="2">2</button>
                                <button type="button" class="btn btn-outline-secondary num-people-button" data-value="3">3</button>
                                <button type="button" class="btn btn-outline-secondary num-people-button" data-value="4">4</button>
                                <button type="button" class="btn btn-outline-secondary num-people-button" data-value="5">5</button>
                            </div>
                            <input type="hidden" id="number-of-people" value="" required>
                            <div id="people-error" class="text-danger mt-2" style="display: none;">
                                Please select the number of people.
                            </div>
                        </div>
                        <div class="d-flex justify-content-start mt-4">
                            <button type="button" class="btn btn-confirm" id="confirm-booking-button" disabled>
                                <i class="fas fa-check-circle me-2"></i>Confirm Booking
                            </button>
                        </div>
                    </div>

                    <!-- Confirmation Section -->
                    <div id="confirmation-section" class="mt-5 text-center hidden">
                        <!-- Booking confirmation content will be injected here dynamically -->
                    </div>
                </div>
            </div>
        </main>

        <!-- Footer -->
        <footer class="footer mt-auto">
            <div class="container py-3">
                <div class="row">
                    <!-- Logo and Address -->
                    <div class="col-md-3 mb-4">
                        <a href="https://www.len.golf">
                            <img src="/images/logo_v1.png" alt="LENGOLF Logo" class="img-fluid mb-3">
                        </a>
                        <p>
                            <a href="https://maps.app.goo.gl/M7ygv921XyzcQwBE8" target="_blank" class="text-decoration-none text-body">
                                The Mercury Ville @ BTS Chidlom<br>
                                Floor 4
                            </a>
                        </p>
                    </div>
                    <!-- Opening Hours -->
                    <div class="col-md-3 mb-4">
                        <h5 class="footer-heading">Opening Hours</h5>
                        <p>
                            10am – 10pm<br>
                            Monday – Sunday
                        </p>
                    </div>
                    <!-- Keep in Touch -->
                    <div class="col-md-3 mb-4">
                        <h5 class="footer-heading">Keep in Touch</h5>
                        <p>
                            <a href="https://www.len.golf" class="text-decoration-none text-body">www.len.golf</a><br>
                            <i class="fas fa-phone-alt me-2"></i>096-668-2335<br>
                            <i class="fas fa-envelope me-2"></i><a href="mailto:info@len.golf" class="text-decoration-none text-body">info@len.golf</a>
                        </p>
                    </div>
                    <!-- Social Media -->
                    <div class="col-md-3 mb-4">
                        <h5 class="footer-heading">Follow Us</h5>
                        <div class="social-icons">
                            <a href="https://www.facebook.com/lengolf.bkk" target="_blank" aria-label="Facebook">
                                <i class="fab fa-facebook-f fa-2x"></i>
                            </a>
                            <a href="https://lin.ee/uxQpIXn" target="_blank" aria-label="LINE">
                                <!-- LINE SVG Icon -->
                                <i class="fab fa-line fa-2x"></i>
                            </a>
                            <a href="https://www.instagram.com/lengolf.bkk/" target="_blank" aria-label="Instagram">
                                <i class="fab fa-instagram fa-2x"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    </div> <!-- End of Wrapper -->

    <!-- Bootstrap JS -->
    <script 
        src="https://cdn.jsdelivr.net/npm/bootstrap@5.3/dist/js/bootstrap.bundle.min.js" 
        crossorigin="anonymous">
    </script>

    <!-- Flatpickr JS -->
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

    <!-- Custom JavaScript -->
    <script src="/js/main.js" defer></script>
</body>
</html>


