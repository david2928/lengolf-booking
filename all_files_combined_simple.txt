

==== public/js/main.js ====

// public/js/main.js

'use strict';

// Initialize Luxon for date handling
const DateTime = luxon.DateTime;

// Global variables to store booking data
let selectedDate = '';
let selectedTimeSlot = '';
let maxDuration = 1;
let currentStepNumber = 1;

// Inactivity timeout (e.g., 15 minutes)
const INACTIVITY_TIMEOUT = 15 * 60 * 1000; // 15 minutes in milliseconds
let inactivityTimer;

// Function to reset the inactivity timer
function resetInactivityTimer() {
    clearTimeout(inactivityTimer);
    inactivityTimer = setTimeout(logoutUser, INACTIVITY_TIMEOUT);
}

// Reset the timer on various user interactions
['click', 'mousemove', 'keydown', 'scroll', 'touchstart'].forEach(event => {
    document.addEventListener(event, resetInactivityTimer);
});

// Start the inactivity timer when the page loads
document.addEventListener('DOMContentLoaded', resetInactivityTimer);

// Initialize booking flow after successful login
function initializeBooking() {
    document.getElementById('login-section').classList.add('hidden');
    document.getElementById('booking-section').classList.remove('hidden');

    selectedDate = localStorage.getItem('selectedDate') || '';
    selectedTimeSlot = localStorage.getItem('selectedTimeSlot') || '';
    maxDuration = parseInt(localStorage.getItem('maxDuration')) || 1;

    let stepToShow = 1;
    if (selectedDate && selectedTimeSlot) {
        stepToShow = 3;
    } else if (selectedDate) {
        stepToShow = 2;
    }

    updateStepHeaders(stepToShow);
    showStep(stepToShow);
    initializeDateOptions();

    if (stepToShow >= 2 && selectedDate) {
        fetchAvailableSlots(selectedDate);
    }

    if (stepToShow === 3) {
        proceedToDetailsForm();
    }
}

// Function to show a specific step
function showStep(stepNumber) {
    currentStepNumber = stepNumber;
    localStorage.setItem('currentStepNumber', stepNumber);

    document.querySelectorAll('.booking-step').forEach(step => step.classList.add('hidden'));
    const step = document.getElementById(`step-${stepNumber}`);
    if (step) step.classList.remove('hidden');

    updateStepHeaders(stepNumber);

    const backButton = document.getElementById('back-button');
    if (stepNumber > 1) {
        backButton.style.display = 'block';
        backButton.onclick = () => showStep(stepNumber - 1);
    } else {
        backButton.style.display = 'none';
    }

    const availableSlotsHeader = document.getElementById('available-slots-header');
    if (availableSlotsHeader) {
        if (stepNumber === 2) {
            availableSlotsHeader.style.display = 'block';
            document.getElementById('selected-date-display-header').textContent = DateTime.fromISO(selectedDate, { zone: 'Asia/Bangkok' }).toFormat('dd/MM/yyyy');
        } else {
            availableSlotsHeader.style.display = 'none';
        }
    }
}

// Function to update progress bar based on current step
function updateStepHeaders(currentStep) {
    const progressBar = document.getElementById('progress-bar');
    let progressPercentage = 0;
    let stepText = '';

    switch (currentStep) {
        case 1:
            progressPercentage = 33;
            stepText = 'Step 1: Select Date';
            break;
        case 2:
            progressPercentage = 66;
            stepText = 'Step 2: Select Time Slot';
            break;
        case 3:
            progressPercentage = 100;
            stepText = 'Step 3: Provide Details';
            break;
    }

    progressBar.style.width = `${progressPercentage}%`;
    progressBar.setAttribute('aria-valuenow', progressPercentage);
    progressBar.textContent = stepText;
}

// Initialize date options in Step 1
function initializeDateOptions() {
    const today = DateTime.now().setZone('Asia/Bangkok');
    const dateOptions = document.querySelectorAll('.date-option');

    const predefinedDateOptions = Array.from(dateOptions).filter(card => !card.classList.contains('custom-date-picker'));

    predefinedDateOptions.forEach(card => {
        const offset = parseInt(card.getAttribute('data-offset'));
        if (isNaN(offset)) {
            console.error('Invalid offset:', card.getAttribute('data-offset'));
            return;
        }
        const date = today.plus({ days: offset });
        card.querySelector('.date-text').textContent = date.toFormat('dd/MM/yyyy');

        if (offset === 2) {
            card.querySelector('.day-after-text').textContent = date.toFormat('cccc');
        }

        card.addEventListener('click', () => {
            dateOptions.forEach(c => c.classList.remove('selected'));
            card.classList.add('selected');
            selectedDate = date.toISODate();
            proceedToTimeSelection();
        });
    });

    const customDateInput = document.getElementById('custom-date');
    const customDateDisplay = document.getElementById('custom-date-display');
    const customDatePickerCard = document.getElementById('custom-date-picker');

    const customFlatpickrInstance = flatpickr(customDateInput, {
        dateFormat: "yyyy-MM-dd",
        minDate: "today",
        onChange: function (selectedDates, dateStr) {
            if (dateStr) {
                dateOptions.forEach(c => c.classList.remove('selected'));
                customDatePickerCard.classList.add('selected');
                selectedDate = DateTime.fromJSDate(selectedDates[0]).toISODate();
                customDateDisplay.textContent = DateTime.fromISO(selectedDate).toFormat('dd/MM/yyyy');
                proceedToTimeSelection();
            }
        }
    });

    customDatePickerCard.addEventListener('click', () => customFlatpickrInstance.open());
}

function proceedToTimeSelection() {
    const selectedDateDisplay = DateTime.fromISO(selectedDate, { zone: 'Asia/Bangkok' });
    if (!selectedDateDisplay.isValid) {
        console.error('Invalid selectedDate:', selectedDate);
        alert('Invalid date selected. Please try again.');
        showStep(1);
        return;
    }
    showStep(2);
    fetchAvailableSlots(selectedDate);
}

// Helper function for fetch responses
async function handleFetchResponse(res) {
    const contentType = res.headers.get('content-type');
    if (!res.ok) {
        const errorMessage = contentType && contentType.includes('application/json') ? (await res.json()).message : `Server responded with status ${res.status}`;
        throw new Error(errorMessage);
    }
    if (contentType && contentType.includes('application/json')) {
        return res.json();
    } else {
        throw new Error('Received non-JSON response from server.');
    }
}

// Fetch available slots from backend
async function fetchAvailableSlots(date) {
    const availableSlotsDiv = document.getElementById('available-slots');
    const loadingSpinner = document.getElementById('loading-spinner');
    loadingSpinner.style.display = 'block';
    availableSlotsDiv.innerHTML = '';

    const token = localStorage.getItem('token');

    try {
        const res = await fetch(`/api/bookings/available-slots?date=${date}`, {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        const data = await handleFetchResponse(res);
        loadingSpinner.style.display = 'none';
        if (data.success) {
            renderAvailableSlots(data.availableSlots);
        } else {
            availableSlotsDiv.innerHTML = `<p class="text-danger">${data.message}</p>`;
        }
    } catch (err) {
        loadingSpinner.style.display = 'none';
        availableSlotsDiv.innerHTML = `<p class="text-danger">Failed to load available slots: ${err.message}</p>`;
        console.error('Error fetching available slots:', err);
    }
}

// Render available slots on the page
function renderAvailableSlots(slots) {
    const availableSlotsDiv = document.getElementById('available-slots');
    availableSlotsDiv.innerHTML = '';

    if (slots.length === 0) {
        availableSlotsDiv.innerHTML = `
            <div class="alert alert-warning d-flex align-items-center" role="alert">
                <i class="fas fa-calendar-times fa-2x me-3"></i>
                <div>
                    <p class="mb-2">Oops! Looks like we're fully booked on this date.</p>
                    <button class="btn btn-primary btn-sm" onclick="showStep(1)">
                        <i class="fas fa-arrow-left me-2"></i>Pick Another Date
                    </button>
                </div>
            </div>
        `;
        return;
    }

    slots.forEach(slot => {
        const slotCol = document.createElement('div');
        slotCol.className = 'col-md-4 col-sm-6 mb-4';

        const slotCard = document.createElement('div');
        slotCard.className = 'card slot-card h-100';

        slotCard.innerHTML = `
            <div class="card-body d-flex flex-column">
                <h5 class="card-title fw-bold">
                    <i class="fas fa-clock me-2"></i>${slot.startTime}
                </h5>
                <p class="card-text">
                    Available for up to ${slot.maxDuration} hour(s)
                </p>
                <div class="mt-auto">
                    <button class="btn btn-primary book-now-button">Select</button>
                </div>
            </div>
        `;

        slotCard.querySelector('.book-now-button').addEventListener('click', () => {
            selectedTimeSlot = slot.startTime;
            maxDuration = slot.maxDuration;
            proceedToDetailsForm();
        });

        slotCol.appendChild(slotCard);
        availableSlotsDiv.appendChild(slotCol);
    });
}

// Proceed to Step 3: Provide Details
function proceedToDetailsForm() {
    showStep(3);

    const confirmButton = document.getElementById('confirm-booking-button');
    confirmButton.disabled = true;
    confirmButton.innerHTML = '<i class="fas fa-check-circle me-2"></i>Confirm Booking';
    confirmButton.classList.remove('enabled');

    document.getElementById('final-date').textContent = DateTime.fromISO(selectedDate).toFormat('dd/MM/yyyy');
    document.getElementById('final-time').textContent = selectedTimeSlot;

    initializeDurationOptions();
    prefillPhoneNumber();
    loadFormData();
    resetNumberOfPeopleSelection();
    validateForm();
    calculateEndTime();

    confirmButton.addEventListener('click', submitBooking);

    document.getElementById('phone-number').addEventListener('input', () => {
        saveFormData();
        validateForm();
    });
    document.getElementById('duration-select').addEventListener('change', () => {
        saveFormData();
        calculateEndTime();
        validateForm();
    });
    document.querySelectorAll('.num-people-button').forEach(button => {
        button.addEventListener('click', () => {
            saveFormData();
            validateForm();
        });
    });
}

// Initialize duration options based on maxDuration
function initializeDurationOptions() {
    const durationSelect = document.getElementById('duration-select');
    durationSelect.innerHTML = '';
    for (let i = 1; i <= maxDuration; i++) {
        const option = document.createElement('option');
        option.value = i;
        option.textContent = `${i} hour(s)`;
        durationSelect.appendChild(option);
    }
}

// Calculate and display the end time
function calculateEndTime() {
    const duration = parseInt(document.getElementById('duration-select').value) || 0;
    if (duration > 0) {
        const startTime = DateTime.fromFormat(selectedTimeSlot, 'HH:mm', { zone: 'Asia/Bangkok' });
        if (!startTime.isValid) {
            console.error('Invalid start time:', selectedTimeSlot);
            document.getElementById('end-time-display').innerHTML = '<strong>--:--</strong>';
            return;
        }
        const endTime = startTime.plus({ hours: duration });
        document.getElementById('end-time-display').innerHTML = `<strong>${endTime.toFormat('HH:mm')}</strong>`;
    } else {
        document.getElementById('end-time-display').innerHTML = '<strong>--:--</strong>';
    }
}

// Prefill phone number from localStorage
function prefillPhoneNumber() {
    const phoneNumberInput = document.getElementById('phone-number');
    const prefilledIndicator = document.getElementById('phone-prefilled-indicator');
    const userPhone = localStorage.getItem('phoneNumber');

    if (userPhone) {
        phoneNumberInput.value = userPhone;
        prefilledIndicator.style.display = 'block';
        phoneNumberInput.classList.add('prefilled');
    } else {
        prefilledIndicator.style.display = 'none';
        phoneNumberInput.classList.remove('prefilled');
    }
    validateForm();
}

// Validate form fields to enable/disable Confirm Booking button
function validateForm() {
    const phoneNumber = document.getElementById('phone-number').value.trim();
    const numberOfPeople = document.getElementById('number-of-people').value;
    const duration = document.getElementById('duration-select').value;

    let isValid = true;

    if (duration === '') {
        document.getElementById('duration-error').style.display = 'block';
        isValid = false;
    } else {
        document.getElementById('duration-error').style.display = 'none';
    }

    const phoneRegex = /^\+?[0-9\s\-()]{7,15}$/;
    if (phoneNumber === '') {
        document.getElementById('phone-error').textContent = 'Please enter your phone number.';
        document.getElementById('phone-error').style.display = 'block';
        isValid = false;
    } else if (!phoneRegex.test(phoneNumber)) {
        document.getElementById('phone-error').textContent = 'Please enter a valid phone number.';
        document.getElementById('phone-error').style.display = 'block';
        isValid = false;
    } else {
        document.getElementById('phone-error').style.display = 'none';
    }

    if (numberOfPeople === '') {
        document.getElementById('people-error').style.display = 'block';
        isValid = false;
    } else {
        document.getElementById('people-error').style.display = 'none';
    }

    const confirmButton = document.getElementById('confirm-booking-button');
    if (isValid) {
        confirmButton.disabled = false;
        confirmButton.classList.add('enabled');
    } else {
        confirmButton.disabled = true;
        confirmButton.classList.remove('enabled');
    }
}

// Handle Number of People Button Clicks
document.querySelectorAll('.num-people-button').forEach(button => {
    button.addEventListener('click', () => {
        document.querySelectorAll('.num-people-button').forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        document.getElementById('number-of-people').value = button.getAttribute('data-value');
        updateNumberOfPeopleBorders();
        validateForm();
    });
});

// Update border colors for Number of People buttons
function updateNumberOfPeopleBorders() {
    const selectedValue = document.getElementById('number-of-people').value;
    const buttons = document.querySelectorAll('.num-people-button');

    buttons.forEach(btn => {
        btn.classList.remove('red-border', 'green-border');
        btn.classList.add(selectedValue ? 'green-border' : 'red-border');
    });
    document.getElementById('people-error').style.display = selectedValue ? 'none' : 'block';
}

// Reset number of people selection
function resetNumberOfPeopleSelection() {
    document.querySelectorAll('.num-people-button').forEach(button => button.classList.remove('active', 'red-border', 'green-border'));
    document.getElementById('number-of-people').value = '';
}

// Submit Booking
async function submitBooking() {
    const token = localStorage.getItem('token');
    if (!token) {
        alert('You are not authenticated. Please log in again.');
        return;
    }

    const userId = localStorage.getItem('userId');
    if (!userId) {
        alert('User ID is missing. Please try logging in again.');
        return;
    }

    const userName = localStorage.getItem('name');
    const email = localStorage.getItem('email');
    const loginMethod = localStorage.getItem('loginMethod');
    const phoneNumber = document.getElementById('phone-number').value.trim();
    const numberOfPeople = parseInt(document.getElementById('number-of-people').value);
    const date = selectedDate;
    const startTime = selectedTimeSlot;
    const duration = parseInt(document.getElementById('duration-select').value);
    const confirmButton = document.getElementById('confirm-booking-button');
    const originalButtonText = confirmButton.innerHTML;

    if (!phoneNumber || isNaN(numberOfPeople) || numberOfPeople < 1) {
        alert('Please provide valid booking details.');
        return;
    }

    confirmButton.disabled = true;
    confirmButton.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Confirming...`;

    try {
        const res = await fetch('/api/bookings/book-slot', {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({
                userId,
                userName,
                email,
                phoneNumber,
                numberOfPeople,
                date,
                startTime,
                duration,
                loginMethod
            }),
        });
        const data = await handleFetchResponse(res);

        if (data.success) {
            localStorage.setItem('phoneNumber', phoneNumber);
            showConfirmation(data.bookingDetails);
        } else {
            confirmButton.disabled = false;
            confirmButton.innerHTML = originalButtonText;
            alert(data.message || 'Failed to book the slot.');
        }
    } catch (err) {
        confirmButton.disabled = false;
        confirmButton.innerHTML = originalButtonText;
        console.error('Error booking slot:', err);
        alert(`An error occurred while booking: ${err.message}`);
    }
}

// Show Confirmation Step
function showConfirmation(bookingData) {
    document.querySelectorAll('.booking-step').forEach(step => step.classList.add('hidden'));
    const progressBarContainer = document.querySelector('.progress');
    if (progressBarContainer) progressBarContainer.style.display = 'none';
    document.getElementById('back-button').style.display = 'none';
    const confirmationSection = document.getElementById('confirmation-section');
    confirmationSection.classList.remove('hidden');

    const userName = localStorage.getItem('name');
    const date = DateTime.fromISO(selectedDate).toFormat('dd/MM/yyyy');
    const startTime = selectedTimeSlot;
    const duration = parseInt(document.getElementById('duration-select').value);
    const numberOfPeople = parseInt(document.getElementById('number-of-people').value);
    const endTime = DateTime.fromFormat(startTime, 'HH:mm', { zone: 'Asia/Bangkok' }).plus({ hours: duration }).toFormat('HH:mm');

    confirmationSection.innerHTML = `
        <div class="card shadow-sm">
            <div class="card-body">
                <h3 class="card-title text-center mb-4">
                    <i class="fas fa-check-circle text-success me-2"></i>Booking Confirmed!
                </h3>
                <p class="text-center">Thank you, <strong>${userName}</strong>, for your booking.</p>
                <div class="table-responsive">
                    <table class="table table-bordered">
                        <tbody>
                            <tr>
                                <th scope="row" class="bg-light">Date</th>
                                <td>${date}</td>
                            </tr>
                            <tr>
                                <th scope="row" class="bg-light">Start Time</th>
                                <td>${startTime}</td>
                            </tr>
                            <tr>
                                <th scope="row" class="bg-light">End Time</th>
                                <td>${endTime}</td>
                            </tr>
                            <tr>
                                <th scope="row" class="bg-light">Duration</th>
                                <td>${duration} hour(s)</td>
                            </tr>
                            <tr>
                                <th scope="row" class="bg-light">Number of People</th>
                                <td>${numberOfPeople}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="text-center mt-4">
                    <button class="btn btn-primary" onclick="promptAnotherBooking()">
                        <i class="fas fa-calendar-check me-2"></i>Book Another Slot
                    </button>
                    <button id="save-image-button" class="btn btn-secondary ms-2">
                        <i class="fas fa-save me-2"></i>Save Confirmation as Image
                    </button>
                </div>
            </div>
        </div>
    `;

    document.getElementById('save-image-button').addEventListener('click', saveConfirmationAsImage);

    localStorage.setItem('bookingConfirmation', JSON.stringify(bookingData));
    localStorage.removeItem('selectedDate');
    localStorage.removeItem('selectedTimeSlot');
    localStorage.removeItem('maxDuration');
    localStorage.removeItem('currentStepNumber');
}

// Prompt user to make another booking
function promptAnotherBooking() {
    selectedDate = '';
    selectedTimeSlot = '';
    maxDuration = 1;

    const confirmButton = document.getElementById('confirm-booking-button');
    confirmButton.disabled = true;
    confirmButton.innerHTML = '<i class="fas fa-check-circle me-2"></i>Confirm Booking';
    confirmButton.classList.remove('enabled');

    const progressBarContainer = document.querySelector('.progress');
    if (progressBarContainer) progressBarContainer.style.display = 'block';

    document.getElementById('confirmation-section').classList.add('hidden');

    initializeBooking();
    localStorage.removeItem('selectedDate');
    localStorage.removeItem('selectedTimeSlot');
    localStorage.removeItem('maxDuration');
    localStorage.removeItem('currentStepNumber');
}

// Attach logout functionality
document.getElementById('logout-button').addEventListener('click', (event) => {
    event.preventDefault();
    localStorage.clear();
    document.getElementById('booking-section').classList.add('hidden');
    document.getElementById('confirmation-section').classList.add('hidden');
    document.getElementById('login-section').classList.remove('hidden');
    document.getElementById('logout-button').style.display = 'none';
});

function saveConfirmationAsImage() {
    const confirmationCard = document.querySelector('#confirmation-section .card');
    html2canvas(confirmationCard, { scale: 2 }).then(canvas => {
        const imageData = canvas.toDataURL('image/png');
        const link = document.createElement('a');
        link.href = imageData;
        link.download = 'booking_confirmation.png';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }).catch(err => {
        console.error('Error capturing confirmation as image:', err);
        alert('An error occurred while saving the image. Please try again.');
    });
}

// Handle login with Google
function handleCredentialResponse(response) {
    const idToken = response.credential;
    if (!idToken) {
        console.error('No credential received.');
        return;
    }

    fetch('/api/auth/login/google', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ token: idToken }),
    })
    .then(res => res.json())
    .then(data => {
        if (data.success) {
            localStorage.setItem('token', data.token);
            localStorage.setItem('userId', data.userId);
            localStorage.setItem('name', data.name);
            localStorage.setItem('email', data.email);
            localStorage.setItem('loginMethod', 'google');
            localStorage.setItem('phoneNumber', data.phoneNumber);
            onLoginSuccess();
        } else {
            alert(data.message || 'Login failed.');
        }
    })
    .catch(err => {
        console.error('Error during login:', err);
        alert('An error occurred during login.');
    });
}

window.onload = function () {
    const token = localStorage.getItem('token');
    const loginMethod = localStorage.getItem('loginMethod');

    if (token && loginMethod && loginMethod !== 'google') {
        console.log('User is already logged in via', loginMethod);
        return;
    }

    const gIdOnload = document.getElementById('g_id_onload');
    const clientId = gIdOnload.getAttribute('data-client_id');

    google.accounts.id.initialize({
        client_id: clientId,
        callback: handleCredentialResponse,
        auto_select: true,
        cancel_on_tap_outside: false,
        prompt_parent_id: 'g_id_onload',
    });

    google.accounts.id.prompt(notification => {
        if (notification.isNotDisplayed() || notification.isSkippedMoment()) {
            console.log('Silent sign-in not possible. User needs to sign in manually.');
        } else if (notification.isDisplayed()) {
            console.log('Prompt displayed.');
        } else if (notification.isDismissedMoment()) {
            console.log('Prompt dismissed.');
        }
    });
};

window.handleCredentialResponse = handleCredentialResponse;

// Handle login with Facebook
function handleFacebookLogin() {
    FB.login(response => {
        if (response.authResponse) {
            const accessToken = response.authResponse.accessToken;

            fetch('/api/auth/login/facebook', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ accessToken }),
            })
            .then(handleFetchResponse)
            .then(data => {
                if (data.success) {
                    localStorage.setItem('token', data.token);
                    localStorage.setItem('userId', data.userId);
                    localStorage.setItem('name', data.name);
                    localStorage.setItem('email', data.email);
                    localStorage.setItem('loginMethod', 'facebook');
                    onLoginSuccess();
                } else {
                    alert(data.message || 'Login failed.');
                }
            })
            .catch(err => {
                console.error('Error during Facebook login:', err);
                alert(`An error occurred during login: ${err.message}`);
            });
        } else {
            alert('Facebook login was not successful.');
        }
    }, { scope: 'public_profile,email' });
}

document.getElementById('facebook-login-button').addEventListener('click', handleFacebookLogin);

// Handle guest login
document.getElementById('guest-login-button').addEventListener('click', () => {
    document.getElementById('login-section').classList.add('hidden');
    document.getElementById('additional-info-section').classList.remove('hidden');
});

document.getElementById('submit-additional-info').addEventListener('click', handleGuestLogin);

async function handleGuestLogin() {
    const name = document.getElementById('additional-name').value.trim();
    const email = document.getElementById('additional-email').value.trim();
    const phone = document.getElementById('additional-phone').value.trim();

    if (!name || !email || !phone) {
        alert('Please fill out all fields.');
        return;
    }

    const submitButton = document.getElementById('submit-additional-info');
    submitButton.disabled = true;
    submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Submitting...';

    try {
        const res = await fetch('/api/auth/login/guest', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name, email, phoneNumber: phone }),
        });
        const data = await handleFetchResponse(res);
        if (data.success) {
            localStorage.setItem('token', data.token);
            localStorage.setItem('userId', data.userId);
            localStorage.setItem('name', data.name);
            localStorage.setItem('email', data.email);
            localStorage.setItem('phoneNumber', data.phoneNumber);
            localStorage.setItem('loginMethod', data.loginSource);

            document.getElementById('additional-info-section').classList.add('hidden');
            onLoginSuccess();
        } else {
            alert(data.message || 'Guest login failed.');
        }
    } catch (err) {
        console.error('Error during guest login:', err);
        alert(`An error occurred during guest login: ${err.message}`);
    } finally {
        submitButton.disabled = false;
        submitButton.innerHTML = 'Submit';
    }
}

function fetchCustomerData() {
    const loginMethod = localStorage.getItem('loginMethod');
    if (loginMethod === 'guest') {
        console.log('Guest user detected. Skipping fetchCustomerData.');
        return Promise.resolve();
    }

    const token = localStorage.getItem('token');
    const userId = localStorage.getItem('userId');

    return fetch(`/api/customers?userId=${userId}`, {
        headers: { 'Authorization': `Bearer ${token}` }
    })
    .then(handleFetchResponse)
    .then(data => {
        if (data.success && data.customerData) {
            localStorage.setItem('phoneNumber', data.customerData.phoneNumber);
            localStorage.setItem('loginSource', data.customerData.loginSource);
        }
    })
    .catch(err => {
        console.error('Error fetching customer data:', err);
    });
}

function isLineBrowser() {
    return /Line/i.test(navigator.userAgent);
}

function toggleLoginOptions() {
    const googleSignIn = document.querySelector('.g_id_signin');
    const facebookLoginButton = document.getElementById('facebook-login-button');
    const lineLoginButton = document.getElementById('line-login-button');
    const guestLoginButton = document.getElementById('guest-login-button');
    const lineBrowserNotification = document.getElementById('line-browser-notification');

    if (isLineBrowser()) {
        if (googleSignIn) googleSignIn.style.display = 'none';
        if (facebookLoginButton) facebookLoginButton.style.display = 'none';
        if (lineLoginButton) lineLoginButton.style.display = 'inline-block';
        if (guestLoginButton) guestLoginButton.style.display = 'inline-block';
        if (lineBrowserNotification) lineBrowserNotification.classList.remove('hidden');
    } else {
        if (googleSignIn) googleSignIn.style.display = 'inline-block';
        if (facebookLoginButton) facebookLoginButton.style.display = 'inline-block';
        if (lineLoginButton) lineLoginButton.style.display = 'inline-block';
        if (guestLoginButton) guestLoginButton.style.display = 'inline-block';
        if (lineBrowserNotification) lineBrowserNotification.classList.add('hidden');
    }
}

document.addEventListener('DOMContentLoaded', () => {
    resetInactivityTimer();
    toggleLoginOptions();
    initializeAppOnLoad();

    const toggleButton = document.querySelector('[data-bs-toggle="collapse"][data-bs-target="#bay-rates-mobile"]');
    const bayRatesMobile = document.getElementById('bay-rates-mobile');

    if (toggleButton && bayRatesMobile) {
        bayRatesMobile.addEventListener('show.bs.collapse', () => {
            toggleButton.textContent = 'Hide Rates';
        });
        bayRatesMobile.addEventListener('hide.bs.collapse', () => {
            toggleButton.textContent = 'Show Rates';
        });
    } else {
        console.error('Toggle button or collapse target not found.');
    }
});

function onLoginSuccess() {
    document.getElementById('login-section').classList.add('hidden');
    document.getElementById('additional-info-section').classList.add('hidden');
    document.getElementById('booking-section').classList.remove('hidden');
    document.getElementById('logout-button').style.display = 'block';
    initializeBooking();
}

function logoutUser() {
    alert('You have been logged out.');
    localStorage.clear();
    document.getElementById('booking-section').classList.add('hidden');
    document.getElementById('confirmation-section').classList.add('hidden');
    document.getElementById('login-section').classList.remove('hidden');
    document.getElementById('logout-button').style.display = 'none';
}

// Function to initialize the app on page load
async function initializeAppOnLoad() {
    const urlParams = new URLSearchParams(window.location.search);
    const tokenFromUrl = urlParams.get('token');

    if (tokenFromUrl) {
        localStorage.setItem('token', tokenFromUrl);
        window.history.replaceState({}, document.title, window.location.pathname);
        const decodedToken = jwt_decode(tokenFromUrl);
        const { userId, email, name, loginSource } = decodedToken;
        localStorage.setItem('userId', userId);
        localStorage.setItem('email', email);
        localStorage.setItem('name', name);
        localStorage.setItem('loginMethod', loginSource);
        await fetchCustomerData();
        onLoginSuccess();
    } else {
        const token = localStorage.getItem('token');
        const userId = localStorage.getItem('userId');

        if (token && userId) {
            const isValid = await verifyToken(token);
            if (isValid) {
                console.log('Token is valid. Restoring session...');
                onLoginSuccess();
            } else {
                console.log('Token is invalid or expired. Logging out...');
                logoutUser();
            }
        } else {
            console.log('No token found. Showing login screen.');
            document.getElementById('login-section').classList.remove('hidden');
            document.getElementById('booking-section').classList.add('hidden');
            document.getElementById('confirmation-section').classList.add('hidden');
        }
    }
}

// Function to verify JWT token with the backend
async function verifyToken(token) {
    try {
        const response = await fetch('/api/auth/verify-token', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`,
            },
        });

        if (!response.ok) {
            console.error('Token verification failed:', response.status, response.statusText);
            return false;
        }

        const data = await response.json();
        return data.valid;
    } catch (error) {
        console.error('Error verifying token:', error);
        return false;
    }
}

function saveFormData() {
    const phoneNumber = document.getElementById('phone-number').value.trim();
    const duration = document.getElementById('duration-select').value;
    const numberOfPeople = document.getElementById('number-of-people').value;

    localStorage.setItem('phoneNumber', phoneNumber);
    localStorage.setItem('duration', duration);
    localStorage.setItem('numberOfPeople', numberOfPeople);
}

function loadFormData() {
    const phoneNumber = localStorage.getItem('phoneNumber') || '';
    const duration = localStorage.getItem('duration') || '';
    const numberOfPeople = localStorage.getItem('numberOfPeople') || '';

    document.getElementById('phone-number').value = phoneNumber;
    document.getElementById('duration-select').value = duration;
    document.getElementById('number-of-people').value = numberOfPeople;

    if (numberOfPeople) {
        document.querySelectorAll('.num-people-button').forEach(button => {
            button.classList.toggle('active', button.getAttribute('data-value') === numberOfPeople);
        });
    }
}




==== public/index.html ====

<!-- public/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Meta Tags -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LENGOLF Booking System</title>

    <!-- Bootstrap CSS -->
    <link 
        href="https://cdn.jsdelivr.net/npm/bootstrap@5.3/dist/css/bootstrap.min.css" 
        rel="stylesheet" 
        crossorigin="anonymous"
    >

    <link rel="icon" href="https://www.len.golf/wp-content/uploads/2024/07/favicon.png" sizes="32x32" />

    <!-- Font Awesome CSS for Icons -->
    <link 
        rel="stylesheet" 
        href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" 
        crossorigin="anonymous"
    />

    <!-- Flatpickr CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/styles.css">

    <!-- Google Fonts -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap">

    <!-- Google Sign-In JavaScript library -->
    <script src="https://accounts.google.com/gsi/client" async defer></script>

    <!-- Facebook SDK -->
    <script async defer crossorigin="anonymous" 
        src="https://connect.facebook.net/en_US/sdk.js#xfbml=1&version=v16.0&appId={{FACEBOOK_APP_ID}}&autoLogAppEvents=1">
    </script>

    <!-- LINE OAuth Credentials -->
    <script>
        window.LINE_CLIENT_ID = "{{LINE_CLIENT_ID}}";
        window.LINE_REDIRECT_URI = "{{LINE_REDIRECT_URI}}";
    </script>

    <!-- html2canvas JS Library -->
    <script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>

    <!-- Luxon JS Library -->
    <script src="https://cdn.jsdelivr.net/npm/luxon@3/build/global/luxon.min.js"></script>
</head>
<body>
    <!-- Wrapper for Flexbox -->
    <div class="d-flex flex-column min-vh-100">
        <!-- Navbar -->
        <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
            <div class="container-fluid">
              <a class="navbar-brand" href="#">LENGOLF Booking</a>
              <button
                class="navbar-toggler"
                type="button"
                data-bs-toggle="collapse"
                data-bs-target="#navbarNavDropdown"
                aria-controls="navbarNavDropdown"
                aria-expanded="false"
                aria-label="Toggle navigation"
              >
                <span class="navbar-toggler-icon"></span>
              </button>
              <div class="collapse navbar-collapse justify-content-end" id="navbarNavDropdown">
                <ul class="navbar-nav">
                  <li class="nav-item">
                    <a class="nav-link" href="https://www.len.golf" target="_blank">Home Page</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" href="#" id="logout-button" style="display: none;">Logout</a>
                  </li>
                </ul>
              </div>
            </div>
          </nav>

        <!-- Main Content -->
        <main class="flex-grow-1">
            <!-- Main Container -->
            <div class="container mt-1 pt-1">
                <!-- Login Section -->
                <div id="login-section" class="text-center">
                    <h2 class="mb-4">Welcome to LENGOLF!</h2>
                    <p>Please choose a login method to start booking your slot.</p>

                    <!-- Centered Google Sign-In Button -->
                    <div class="d-flex justify-content-center">
                        <div
                            id="g_id_onload"
                            data-client_id="459419604461-40b814vc4m04mq4qp8a30luiocs8961d.apps.googleusercontent.com"
                            data-callback="handleCredentialResponse"
                            data-auto_prompt="false"
                            data-auto_select="true"
                        ></div>

                        <div
                            class="g_id_signin mt-3"
                            data-type="standard"
                            data-size="large"
                            data-theme="outline"
                            data-text="sign_in_with"
                            data-shape="rectangular"
                            data-logo_alignment="left"
                        ></div>
                    </div>

                    <!-- Notification for LINE Browser Users -->
                    <div id="line-browser-notification" class="alert alert-info alert-dismissible fade show mt-3 hidden" role="alert">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Notice:</strong> To use Google or Facebook login methods, please open this page in your device's external browser.
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>

                    <hr class="my-4">

                    <!-- Facebook Login Button -->
                    <button id="facebook-login-button" class="btn facebook-button mb-3">
                        <i class="fab fa-facebook-f me-2"></i>Login with Facebook
                    </button>

                    <!-- LINE Login Button -->
                    <button id="line-login-button" class="btn btn-success mb-3">
                        <i class="fab fa-line me-2"></i>Login with LINE
                    </button>

                    <br>

                    <!-- Guest Login Button -->
                    <button id="guest-login-button" class="btn btn-secondary mb-4">
                        <i class="fas fa-user me-2"></i>Continue as Guest
                    </button>
                </div>

                <!-- Additional Information Form (Hidden by Default) -->
                <div id="additional-info-section" class="mt-5 hidden">
                    <h3 class="text-center mb-4">Please Provide Your Details</h3>
                    <form id="additional-info-form">
                        <div class="mb-3">
                            <label for="additional-name" class="form-label">Name</label>
                            <input type="text" class="form-control" id="additional-name" placeholder="Enter your name" required>
                            <div class="invalid-feedback">
                                Please enter your name.
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="additional-email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="additional-email" placeholder="Enter your email" required>
                            <div class="invalid-feedback">
                                Please enter a valid email address.
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="additional-phone" class="form-label">Phone Number</label>
                            <input type="tel" class="form-control" id="additional-phone" placeholder="Enter your phone number" required>
                            <div class="invalid-feedback">
                                Please enter a valid phone number.
                            </div>
                        </div>
                        <!-- Added 'mb-4' class here -->
                        <button type="button" id="submit-additional-info" class="btn btn-primary mb-4">Submit</button>
                    </form>
                </div>

                <!-- Booking Section -->
                <div id="booking-section" class="mt-5 hidden">
                    <!-- Sticky Header -->
                    <div class="sticky-top">
                        <div>
                            <div class="d-flex flex-column mb-2">
                                <div class="d-flex align-items-center">
                                    <!-- Back Button -->
                                    <button class="btn btn-secondary btn-sm me-2" id="back-button" style="display: none;">
                                        <i class="fas fa-arrow-left me-2"></i>Back
                                    </button>
                                    <!-- Progress Bar -->
                                    <div class="progress flex-grow-1" style="height: 30px;">
                                        <div id="progress-bar" class="progress-bar" role="progressbar" style="width: 66%;" aria-valuenow="66" aria-valuemin="0" aria-valuemax="100">
                                            Step 2: Select Time Slot
                                        </div>
                                    </div>
                                </div>
                                <!-- Available Slots Text (now within sticky header) -->
                                <p class="text-center mb-0" id="available-slots-header" style="display: none;">
                                    <i class="fas fa-calendar-alt me-1"></i>
                                    Available slots for <span id="selected-date-display-header"></span>
                                </p>
                                <!-- Divider -->
                                <div class="divider" id="sticky-divider"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Step 1: Select Date -->
                    <div id="step-1" class="booking-step">
                        <p class="text-center">Choose a date to see available time slots.</p>
                        <div class="row justify-content-center mb-4">
                            <!-- Today Card -->
                            <div class="col-6 col-md-3 mb-3">
                                <div class="card date-option h-100" data-offset="0">
                                    <div class="card-body text-center d-flex flex-column justify-content-center">
                                        <i class="fas fa-calendar-day fa-2x mb-2"></i>
                                        <h5 class="card-title">Today</h5>
                                        <p class="card-text date-text"></p>
                                    </div>
                                </div>
                            </div>
                            <!-- Tomorrow Card -->
                            <div class="col-6 col-md-3 mb-3">
                                <div class="card date-option h-100" data-offset="1">
                                    <div class="card-body text-center d-flex flex-column justify-content-center">
                                        <i class="fas fa-calendar-check fa-2x mb-2"></i>
                                        <h5 class="card-title">Tomorrow</h5>
                                        <p class="card-text date-text"></p>
                                    </div>
                                </div>
                            </div>
                            <!-- Day After Tomorrow Card -->
                            <div class="col-6 col-md-3 mb-3">
                                <div class="card date-option h-100" data-offset="2">
                                    <div class="card-body text-center d-flex flex-column justify-content-center">
                                        <i class="fas fa-calendar-week fa-2x mb-2"></i>
                                        <h5 class="card-title day-after-text"></h5>
                                        <p class="card-text date-text"></p>
                                    </div>
                                </div>
                            </div>
                            <!-- Custom Date Picker Card -->
                            <div class="col-6 col-md-3 mb-3">
                                <div class="card date-option h-100 custom-date-picker" id="custom-date-picker">
                                    <div class="card-body text-center d-flex flex-column justify-content-center">
                                        <i class="fas fa-calendar fa-2x mb-2"></i>
                                        <h5 class="card-title">Select Date</h5>
                                        <p class="card-text" id="custom-date-display">Tap to select</p>
                                        <!-- Removed inline style to allow CSS to handle visibility -->
                                        <input type="text" id="custom-date" />
                                    </div>
                                </div>
                            </div>
                            <div class="d-none d-md-block">
                                <img src="/images/lengolf_bay_rate.jpg" alt="Bay Rates" class="img-fluid my-4">
                            </div>
                            <!-- Toggle Button for Mobile -->
                            <!-- Toggle Button for Mobile -->
                            <!-- Toggle Button for Mobile -->
                            <div class="d-block d-md-none text-center mb-3">
                                <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#bay-rates-mobile" aria-expanded="false" aria-controls="bay-rates-mobile">
                                    Show Rates
                                </button>
                            </div>


                            <!-- Bay Rates for Mobile (Initially Hidden) -->
                            <div class="collapse text-center" id="bay-rates-mobile">
                                <img src="/images/lengolf_bay_rate.jpg" alt="Bay Rates" class="img-fluid mb-1">
                                <p class="text-muted small mt-1">Bay Rates are per hour</p>
                            </div>              
                        </div>
                    </div>

                    <!-- Step 2: Select Time Slot -->
                    <div id="step-2" class="booking-step hidden">
                        <div id="loading-spinner" class="text-center my-5" style="display: none;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-3">Fetching available slots...</p>
                        </div>
                        <div id="available-slots" class="row">
                            <!-- Available slots will be displayed here -->
                        </div>
                    </div>

                    <!-- Step 3: Provide Details -->
                    <div id="step-3" class="booking-step hidden">
                        <!-- Visual Display of Selected Date and Time -->
                        <div class="row mb-4">
                            <div class="col-12 col-md-6 mb-3">
                                <div class="card selected-info-card">
                                    <div class="card-body text-center">
                                        <i class="fas fa-calendar-alt fa-2x mb-2"></i>
                                        <h5 class="card-title">Selected Date</h5>
                                        <p class="card-text" id="final-date"></p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-12 col-md-6 mb-3">
                                <div class="card selected-info-card">
                                    <div class="card-body text-center">
                                        <i class="fas fa-clock fa-2x mb-2"></i>
                                        <h5 class="card-title">Selected Time</h5>
                                        <p class="card-text" id="final-time"></p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Divider -->
                        <div class="divider"></div>

                        <!-- Duration Selection -->
                        <div class="mb-4">
                            <label for="duration-select" class="form-label">Select Duration (hours):</label>
                            <select id="duration-select" class="form-select" required>
                                <!-- Options will be dynamically loaded here -->
                            </select>
                            <div id="duration-error" class="text-danger mt-2" style="display: none;">
                                Please select a duration.
                            </div>
                        </div>
                        <!-- Display End Time -->
                        <div class="mb-4">
                            <label class="form-label">End Time:</label>
                            <p id="end-time-display" class="fs-5"><strong>--:--</strong></p>
                        </div>

                        <!-- Form for phone number and number of people -->
                        <div class="mb-4">
                            <label for="phone-number" class="form-label">Phone Number:</label>
                            <input type="tel" id="phone-number" class="form-control" placeholder="Enter your phone number" required>
                            <small id="phone-prefilled-indicator" class="form-text text-muted" style="display: none;">
                                Prefilled from your account. You can change it if needed.
                            </small>
                            <div id="phone-error" class="text-danger mt-2" style="display: none;">
                                Please enter your phone number.
                            </div>
                        </div>
                        <!-- Number of People Selection -->
                        <div class="mb-4">
                            <label class="form-label d-block">Number of People:</label>
                            <div id="number-of-people-buttons" class="btn-group" role="group" aria-label="Number of People">
                                <button type="button" class="btn btn-outline-secondary num-people-button" data-value="1">1</button>
                                <button type="button" class="btn btn-outline-secondary num-people-button" data-value="2">2</button>
                                <button type="button" class="btn btn-outline-secondary num-people-button" data-value="3">3</button>
                                <button type="button" class="btn btn-outline-secondary num-people-button" data-value="4">4</button>
                                <button type="button" class="btn btn-outline-secondary num-people-button" data-value="5">5</button>
                            </div>
                            <input type="hidden" id="number-of-people" value="" required>
                            <div id="people-error" class="text-danger mt-2" style="display: none;">
                                Please select the number of people.
                            </div>
                        </div>
                        <div class="d-flex justify-content-start mt-4">
                            <button type="button" class="btn btn-confirm" id="confirm-booking-button" disabled>
                                <i class="fas fa-check-circle me-2"></i>Confirm Booking
                            </button>
                        </div>
                    </div>

                    <!-- Confirmation Section -->
                    <div id="confirmation-section" class="mt-5 text-center hidden">
                        <!-- Booking confirmation content will be injected here dynamically -->
                    </div>
                </div>
            </div>
        </main>

        <!-- Footer -->
        <footer class="footer mt-auto">
            <div class="container py-3">
                <div class="row">
                    <!-- Logo and Address -->
                    <div class="col-md-3 mb-4">
                        <a href="https://www.len.golf">
                            <img src="/images/logo_v1.png" alt="LENGOLF Logo" class="img-fluid mb-3">
                        </a>
                        <p>
                            <a href="https://maps.app.goo.gl/M7ygv921XyzcQwBE8" target="_blank" class="text-decoration-none text-body">
                                The Mercury Ville @ BTS Chidlom<br>
                                Floor 4
                            </a>
                        </p>
                    </div>
                    <!-- Opening Hours -->
                    <div class="col-md-3 mb-4">
                        <h5 class="footer-heading">Opening Hours</h5>
                        <p>
                            10am – 10pm<br>
                            Monday – Sunday
                        </p>
                    </div>
                    <!-- Keep in Touch -->
                    <div class="col-md-3 mb-4">
                        <h5 class="footer-heading">Keep in Touch</h5>
                        <p>
                            <a href="https://www.len.golf" class="text-decoration-none text-body">www.len.golf</a><br>
                            <i class="fas fa-phone-alt me-2"></i>096-668-2335<br>
                            <i class="fas fa-envelope me-2"></i><a href="mailto:info@len.golf" class="text-decoration-none text-body">info@len.golf</a>
                        </p>
                    </div>
                    <!-- Social Media -->
                    <div class="col-md-3 mb-4">
                        <h5 class="footer-heading">Follow Us</h5>
                        <div class="social-icons">
                            <a href="https://www.facebook.com/lengolf.bkk" target="_blank" aria-label="Facebook">
                                <i class="fab fa-facebook-f fa-2x"></i>
                            </a>
                            <a href="https://lin.ee/uxQpIXn" target="_blank" aria-label="LINE">
                                <!-- LINE SVG Icon or Font Awesome LINE Icon -->
                                <i class="fab fa-line fa-2x"></i>
                            </a>
                            <a href="https://www.instagram.com/lengolf.bkk/" target="_blank" aria-label="Instagram">
                                <i class="fab fa-instagram fa-2x"></i>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    </div> <!-- End of Wrapper -->

    <!-- Bootstrap JS -->
    <script 
        src="https://cdn.jsdelivr.net/npm/bootstrap@5.3/dist/js/bootstrap.bundle.min.js" 
        crossorigin="anonymous">
    </script>

    <!-- Flatpickr JS -->
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

    <!-- Add this before your custom JS -->
    <script src="https://cdn.jsdelivr.net/npm/jwt-decode@3/build/jwt-decode.min.js"></script>

    <!-- Custom JavaScript -->
    <script src="/js/main.js" defer></script>
    <script>
        document.getElementById('line-login-button').addEventListener('click', () => {
            const clientId = window.LINE_CLIENT_ID;
            const redirectUri = window.LINE_REDIRECT_URI;
            const state = generateRandomString(16); // Implement a function to generate a random state string
            const scope = 'profile openid email'; // Adjust scopes as needed
            const responseType = 'code';
            const prompt = 'consent';
    
            // Save state in localStorage to verify later
            localStorage.setItem('line_oauth_state', state);
    
            const authorizationURL = `https://access.line.me/oauth2/v2.1/authorize?` +
                `response_type=${encodeURIComponent(responseType)}` +
                `&client_id=${encodeURIComponent(clientId)}` +
                `&redirect_uri=${encodeURIComponent(redirectUri)}` +
                `&state=${encodeURIComponent(state)}` +
                `&scope=${encodeURIComponent(scope)}` 
                // +
                // `&prompt=${encodeURIComponent(prompt)}`
                ;
    
            // Redirect to LINE's OAuth 2.0 server
            window.location.href = authorizationURL;
        });
    
        /**
         * Generates a random string for state parameter
         * @param {number} length - Desired length of the string
         * @returns {string} - Random string
         */
        function generateRandomString(length) {
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            let result = '';
            for (let i = 0; i < length; i++) {
                result += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return result;
        }
    </script>
</body>
</html>




==== index.js ====

// index.js

const dotenv = require('dotenv');
const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const apiRouter = require('./routes/index');
const logger = require('./utils/logger');
const app = express();
const PORT = process.env.PORT || 8080; // Ensuring the app listens on the Cloud Run-assigned port

// Load environment variables from .env file in development
if (process.env.NODE_ENV !== 'production') {
    dotenv.config();
    console.log('Environment variables loaded from local .env file');
}

// CORS setup
app.use(cors());

// JSON parsing middleware
app.use(express.json());

// Serve static files from 'public' directory
app.use(
    express.static(path.join(__dirname, 'public'), {
        index: false, // Disable serving index.html
    })
);

// Serve index.html with environment variables replaced
app.get('/', (req, res) => {
    const indexPath = path.join(__dirname, 'public', 'index.html');

    fs.readFile(indexPath, 'utf8', (err, data) => {
        if (err) {
            logger.error('Error reading index.html:', err);
            return res.status(500).send('Internal Server Error');
        }

        // Replace placeholders with actual values
        const replacedData = data
            .replace('{{GOOGLE_CLIENT_ID}}', process.env.GOOGLE_CLIENT_ID)
            .replace('{{FACEBOOK_APP_ID}}', process.env.FACEBOOK_APP_ID)
            .replace('{{LINE_CLIENT_ID}}', process.env.LINE_CLIENT_ID)
            .replace('{{LINE_REDIRECT_URI}}', process.env.LINE_REDIRECT_URI);

        res.send(replacedData);
    });
});

// Use the API router for all /api routes
app.use('/api', apiRouter);

// Error Handling Middleware
app.use((err, req, res, next) => {
    logger.error(err.stack);
    res.status(500).json({ success: false, message: 'Internal Server Error.' });
});

// Initialize scheduled tasks
require('./utils/scheduler');

console.log(`Configured PORT: ${PORT}`);

// Start the server
app.listen(PORT, () => {
    logger.info(`Server is running on port ${PORT}`);
});




==== config/index.js ====

// config/index.js

const googleApiConfig = require('./googleApiConfig');
const redisConfig = require('./redisConfig');
const logger = require('../utils/logger');

require('dotenv').config();

// Validate other required environment variables
const requiredVars = [
    'GOOGLE_CLIENT_ID',
    'JWT_SECRET',
    'LINE_CLIENT_ID',
    'LINE_CLIENT_SECRET',
    'LINE_REDIRECT_URI',
    'FRONTEND_URL'
    // Add other required variables here
];

const missingVars = requiredVars.filter(envVar => !process.env[envVar]);

if (missingVars.length > 0) {
    logger.error(`Missing required environment variables: ${missingVars.join(', ')}`);
    process.exit(1);
}

module.exports = {
    googleApiConfig,
    redisConfig,
    GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID,
    JWT_SECRET: process.env.JWT_SECRET,
    LINE_CLIENT_ID: process.env.LINE_CLIENT_ID,
    LINE_CLIENT_SECRET: process.env.LINE_CLIENT_SECRET,
    LINE_REDIRECT_URI: process.env.LINE_REDIRECT_URI,
    FRONTEND_URL: process.env.FRONTEND_URL
};




==== routes/api/authRoutes.js ====

// routes/api/authRoutes.js

const express = require('express');
const router = express.Router();
const authController = require('../../controllers/authController');
const { validateLogin, validateGuestLogin, validateFacebookLogin, validateLineLogin } = require('../../middlewares/validationMiddleware');
const { JWT_SECRET } = require('../../config'); // Corrected path

const jwt = require('jsonwebtoken');

// Import the logger
const logger = require('../../utils/logger');


router.post('/verify-token', (req, res) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
        return res.status(401).json({ valid: false, message: 'No token provided.' });
    }

    jwt.verify(token, JWT_SECRET, (err, decoded) => {
        if (err) {
            return res.status(401).json({ valid: false, message: 'Invalid token.' });
        }

        // Optionally, you can include additional checks here

        return res.json({ valid: true });
    });
});


module.exports = router;


/**
 * @route POST /api/auth/login/google
 * @desc Authenticate user with Google and provide JWT
 */
router.post('/login/google', validateLogin, (req, res, next) => {
    logger.info('Received POST /api/auth/login/google request');
    next();
}, authController.loginWithGoogle);

/**
 * @route POST /api/auth/login/facebook
 * @desc Authenticate user with Facebook and provide JWT
 */
router.post('/login/facebook', validateFacebookLogin, (req, res, next) => {
    logger.info('Received POST /api/auth/login/facebook request');
    next();
}, authController.loginWithFacebook);

/**
 * @route POST /api/auth/login/line
 * @desc Authenticate user with LINE and provide JWT
 */
router.post('/login/line', validateLineLogin, (req, res, next) => {
    logger.info('Received POST /api/auth/login/line request');
    next();
}, authController.loginWithLine);

/**
 * @route POST /api/auth/login/guest
 * @desc Authenticate guest user and provide JWT
 */
router.post('/login/guest', validateGuestLogin, authController.loginAsGuest);

/**
 * @route POST /api/auth/complete-facebook-login
 * @desc Complete Facebook login by accepting additional info
 */
router.post('/complete-facebook-login', validateGuestLogin, (req, res, next) => {
    logger.info('Received POST /api/auth/complete-facebook-login request');
    authController.completeFacebookLogin(req, res, next);
});

// Add this route to handle LINE callback
router.get('/line/callback', authController.lineCallback);

module.exports = router;




==== controllers/authController.js ====

// controllers/authController.js

const { OAuth2Client } = require('google-auth-library');
const axios = require('axios');
const customerService = require('../services/customerService');
const logger = require('../utils/logger');
const jwt = require('jsonwebtoken');
const { GOOGLE_CLIENT_ID, JWT_SECRET, googleApiConfig, FRONTEND_URL } = require('../config'); // Ensure JWT_SECRET is imported
const lineService = require('../services/lineService'); // Import LINE service

// Initialize Google OAuth2 Client
const googleClient = new OAuth2Client(GOOGLE_CLIENT_ID);

// Extract Facebook credentials
const FACEBOOK_APP_ID = googleApiConfig.FACEBOOK_APP_ID;
const FACEBOOK_APP_SECRET = googleApiConfig.FACEBOOK_APP_SECRET;

/**
 * Handle user login by verifying Google ID token.
 */
exports.loginWithGoogle = async (req, res) => {
    const { token } = req.body;

    if (!token) {
        return res.status(400).json({ success: false, message: 'Token is required.' });
    }

    try {
        const ticket = await googleClient.verifyIdToken({
            idToken: token,
            audience: GOOGLE_CLIENT_ID,
        });

        const payload = ticket.getPayload();
        const userId = payload['sub'];
        const email = payload['email'];
        const name = payload['name'];

        // Fetch or create user in your database
        const customerData = await customerService.getCustomerData(userId);
        const phoneNumber = customerData ? customerData.phoneNumber : '';
        const loginSource = 'Google';

        await customerService.saveOrUpdateCustomerData({
            userId,
            name,
            email,
            phoneNumber,
            loginSource,
        });

        // Generate JWT for your application
        const jwtToken = jwt.sign({ userId, email, name, loginSource }, JWT_SECRET, {
            expiresIn: '1h',
        });

        return res.status(200).json({
            success: true,
            token: jwtToken,
            userId,
            email,
            name,
            phoneNumber,
            loginSource,
        });
    } catch (error) {
        logger.error('Error verifying Google token:', error);
        return res.status(401).json({ success: false, message: 'Invalid token.' });
    }
};


/**
 * Handle user login by verifying Facebook access token.
 */
exports.loginWithFacebook = async (req, res) => {
    const { accessToken } = req.body;

    if (!accessToken) {
        return res.status(400).json({ success: false, message: 'Access token is required.' });
    }

    try {
        // Verify the access token with Facebook
        const debugTokenResponse = await axios.get(`https://graph.facebook.com/debug_token`, {
            params: {
                input_token: accessToken,
                access_token: `${FACEBOOK_APP_ID}|${FACEBOOK_APP_SECRET}`,
            },
        });

        const data = debugTokenResponse.data.data;

        if (!data.is_valid) {
            return res.status(401).json({ success: false, message: 'Invalid Facebook access token.' });
        }

        const userId = data.user_id;

        // Fetch user data from Facebook
        const userDataResponse = await axios.get(`https://graph.facebook.com/${userId}`, {
            params: {
                fields: 'id,name,email',
                access_token: accessToken,
            },
        });

        const userData = userDataResponse.data;
        const email = userData.email || '';
        const name = userData.name || '';

        // Fetch customer data from Google Sheets
        const customerData = await customerService.getCustomerData(userId);
        const phoneNumber = customerData ? customerData.phoneNumber : '';
        const loginSource = 'Facebook';

        // Save or update customer data
        await customerService.saveOrUpdateCustomerData({ userId, name, email, phoneNumber, loginSource });

        // Generate JWT
        const jwtToken = jwt.sign(
            { userId, email, name, loginSource },
            process.env.JWT_SECRET,
            { expiresIn: '1h' }
        );

        return res.status(200).json({ 
            success: true, 
            token: jwtToken,
            userId, 
            email, 
            name, 
            phoneNumber,
            loginSource
        });
    } catch (error) {
        logger.error('Error verifying Facebook access token:', error);
        return res.status(401).json({ success: false, message: 'Invalid Facebook access token.' });
    }
};

/**
 * Handle user login by verifying LINE authorization code.
 */
exports.loginWithLine = async (req, res) => {
    const { code } = req.body;

    if (!code) {
        return res.status(400).json({ success: false, message: 'Authorization code is required.' });
    }

    try {
        // Exchange code for access token
        const tokenData = await lineService.getAccessToken(code);
        const accessToken = tokenData.access_token;

        // Fetch user profile
        const userProfile = await lineService.getUserProfile(accessToken);
        const userId = userProfile.userId;
        const displayName = userProfile.displayName;
        const email = userProfile.email || ''; // Ensure email is at least an empty string
        const pictureUrl = userProfile.pictureUrl || '';

        // Fetch customer data from Google Sheets
        const customerData = await customerService.getCustomerData(userId);
        const phoneNumber = customerData ? customerData.phoneNumber : '';
        const loginSource = 'LINE';

        // Save or update customer data
        await customerService.saveOrUpdateCustomerData({
            userId,
            name: displayName,
            email,
            phoneNumber,
            loginSource,
        });

        // Generate JWT
        const jwtToken = jwt.sign({ userId, email, name: displayName, loginSource }, JWT_SECRET, {
            expiresIn: '1h',
        });

        return res.status(200).json({
            success: true,
            token: jwtToken,
            userId,
            email,
            name: displayName,
            phoneNumber,
            loginSource,
        });
    } catch (error) {
        logger.error('Error during LINE login:', error.response ? error.response.data : error.message);
        return res.status(401).json({ success: false, message: 'Invalid authorization code.' });
    }
};
/**
 * Handle guest login by accepting user details directly.
 */
exports.loginAsGuest = async (req, res) => {
    const { name, email, phoneNumber } = req.body;

    // Basic validation
    if (!name || !email || !phoneNumber) {
        return res.status(400).json({ success: false, message: 'Name, email, and phone number are required for guest login.' });
    }

    try {
        // Generate a unique userId for the guest (could use UUID)
        const userId = `guest_${Date.now()}`;

        const loginSource = 'Guest';

        // Save or update customer data
        await customerService.saveOrUpdateCustomerData({ userId, name, email, phoneNumber, loginSource });

        // Generate JWT using imported JWT_SECRET
        const jwtToken = jwt.sign(
            { userId, email, name, loginSource },
            JWT_SECRET, // Use imported JWT_SECRET
            { expiresIn: '1h' } // Token expires in 1 hour
        );

        return res.status(200).json({ 
            success: true, 
            token: jwtToken, // Return the JWT to the client
            userId, 
            email, 
            name, 
            phoneNumber,
            loginSource
        });
    } catch (error) {
        logger.error('Error during guest login:', error);
        return res.status(500).json({ success: false, message: 'Internal Server Error.' });
    }
};

/**
 * Handle additional information for Facebook users missing name or email.
 */
exports.addAdditionalInfoForFacebookUser = async (req, res) => {
    const { userId, name, email, phoneNumber } = req.body;

    // Basic validation
    if (!userId || !name || !email || !phoneNumber) {
        return res.status(400).json({ success: false, message: 'User ID, name, email, and phone number are required.' });
    }

    try {
        const loginSource = 'Facebook';

        // Save or update customer data
        await customerService.saveOrUpdateCustomerData({ userId, name, email, phoneNumber, loginSource });

        // Generate JWT
        const jwtToken = jwt.sign(
            { userId, email, name, loginSource },
            process.env.JWT_SECRET,
            { expiresIn: '1h' } // Token expires in 1 hour
        );

        return res.status(200).json({ 
            success: true, 
            token: jwtToken, // Return the JWT to the client
            userId, 
            email, 
            name, 
            phoneNumber,
            loginSource
        });
    } catch (error) {
        logger.error('Error adding additional info for Facebook user:', error);
        return res.status(500).json({ success: false, message: 'Internal Server Error.' });
    }
};

exports.completeFacebookLogin = async (req, res) => {
    const { userId, name, email, phoneNumber } = req.body;

    // Basic validation
    if (!userId || !name || !email || !phoneNumber) {
        return res.status(400).json({ success: false, message: 'User ID, name, email, and phone number are required.' });
    }

    try {
        const loginSource = 'Facebook';

        // Save or update customer data
        await customerService.saveOrUpdateCustomerData({ userId, name, email, phoneNumber, loginSource });

        // Generate JWT
        const jwtToken = jwt.sign(
            { userId, email, name, loginSource },
            process.env.JWT_SECRET,
            { expiresIn: '1h' }
        );

        return res.status(200).json({ 
            success: true, 
            token: jwtToken,
            userId, 
            email, 
            name, 
            phoneNumber,
            loginSource
        });
    } catch (error) {
        logger.error('Error completing Facebook login:', error);
        return res.status(500).json({ success: false, message: 'Internal Server Error.' });
    }
};

exports.lineCallback = async (req, res) => {
    const { code, state } = req.query;

    if (!code) {
        return res.status(400).json({ success: false, message: 'Authorization code is missing.' });
    }

    try {
        // Exchange code for access token
        const tokenData = await lineService.getAccessToken(code);
        const accessToken = tokenData.access_token;

        // Fetch user profile
        const userProfile = await lineService.getUserProfile(accessToken);
        const userId = userProfile.userId;
        const displayName = userProfile.displayName;
        const email = userProfile.email || ''; // LINE may not provide email by default

        // Fetch or create user in your database
        const customerData = await customerService.getCustomerData(userId);
        const phoneNumber = customerData ? customerData.phoneNumber : '';
        const loginSource = 'LINE';

        await customerService.saveOrUpdateCustomerData({
            userId,
            name: displayName,
            email,
            phoneNumber,
            loginSource,
        });

        // Generate JWT
        const jwtToken = jwt.sign(
            { userId, email, name: displayName, loginSource },
            JWT_SECRET,
            { expiresIn: '1h' },
        );

        // Redirect to front-end with the token
        res.redirect(`${FRONTEND_URL}?token=${encodeURIComponent(jwtToken)}`);
    } catch (error) {
        logger.error('Error during LINE callback:', error.response ? error.response.data : error.message);
        return res.status(500).json({ success: false, message: 'An error occurred during LINE login.' });
    }
};




==== middlewares/authMiddleware.js ====

// middlewares/authMiddleware.js

const jwt = require('jsonwebtoken');
const logger = require('../utils/logger');
const util = require('util');
const { JWT_SECRET } = require('../config');

// Promisify jwt.verify to use async/await
const verifyJwt = util.promisify(jwt.verify);

/**
 * Middleware to authenticate requests using JWT.
 * Assumes that the JWT is sent in the Authorization header as a Bearer token.
 */

/**
 * Extracts the JWT token from the Authorization header.
 * @param {Object} req - Express request object
 * @returns {string|null} - The extracted token or null if not found
 */
function extractToken(req) {
    const authHeader = req.headers['authorization'] || req.headers['Authorization'];
    if (!authHeader) {
        return null;
    }

    const parts = authHeader.split(' ');
    if (parts.length !== 2) {
        return null;
    }

    const scheme = parts[0];
    const token = parts[1];

    if (/^Bearer$/i.test(scheme)) {
        return token;
    }

    return null;
}

/**
 * Express middleware to authenticate JWT tokens.
 * @param {Object} req - Express request object
 * @param {Object} res - Express response object
 * @param {Function} next - Express next middleware function
 */
async function authenticateJWT(req, res, next) {
    try {
        const token = extractToken(req);

        if (!token) {
            logger.warn(
                `Authentication failed: No token provided. Path: ${req.originalUrl}, Method: ${req.method}`
            );
            return res
                .status(401)
                .json({ success: false, message: 'Authentication token is missing or invalid.' });
        }

        // Verify the token
        const decoded = await verifyJwt(token, JWT_SECRET);

        // Attach decoded token to request for use in subsequent middlewares/routes
        req.user = decoded;
        next();
    } catch (error) {
        // Handle specific JWT errors
        if (error.name === 'TokenExpiredError') {
            logger.warn(
                `Authentication failed: Token expired. Path: ${req.originalUrl}, Method: ${req.method}`
            );
            return res
                .status(401)
                .json({ success: false, message: 'Authentication token has expired.' });
        } else if (error.name === 'JsonWebTokenError') {
            logger.warn(
                `Authentication failed: Invalid token. Path: ${req.originalUrl}, Method: ${req.method}, Error: ${error.message}`
            );
            return res
                .status(401)
                .json({ success: false, message: 'Authentication token is invalid.' });
        } else {
            // For other errors, respond with a generic message
            logger.error(
                `Authentication error: ${error.message}. Path: ${req.originalUrl}, Method: ${req.method}`,
                error
            );
            return res
                .status(500)
                .json({ success: false, message: 'An internal server error occurred during authentication.' });
        }
    }
}

module.exports = authenticateJWT;




==== services/lineService.js ====

// services/lineService.js

const axios = require('axios');
const querystring = require('querystring');
const { LINE_CLIENT_ID, LINE_CLIENT_SECRET, LINE_REDIRECT_URI } = require('../config');

exports.getAccessToken = async (code) => {
    const tokenEndpoint = 'https://api.line.me/oauth2/v2.1/token';

    const params = {
        grant_type: 'authorization_code',
        code: code,
        redirect_uri: LINE_REDIRECT_URI,
        client_id: LINE_CLIENT_ID,
        client_secret: LINE_CLIENT_SECRET,
    };

    const response = await axios.post(tokenEndpoint, querystring.stringify(params), {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    });

    return response.data;
};

exports.getUserProfile = async (accessToken) => {
    const profileEndpoint = 'https://api.line.me/v2/profile';

    const response = await axios.get(profileEndpoint, {
        headers: { Authorization: `Bearer ${accessToken}` },
    });

    return response.data;
};




==== services/firebaseService.js ====

// services/firebaseService.js

const admin = require('firebase-admin');
const serviceAccount = require('../config/serviceAccountKey.json'); // Ensure the path is correct

// Initialize Firebase Admin SDK
admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    projectId: 'lengolf-booking-system-436804'
  });

const db = admin.firestore();

module.exports = { admin, db };




==== services/bookingService.js ====

// services/bookingService.js

const { admin, db } = require('./firebaseService'); // Import both admin and db
const { CALENDARS } = require('../config/googleApiConfig');
const calendarService = require('./google/calendarService');
const cacheService = require('./cache/redisService');
const lineNotifyService = require('./notifications/lineNotifyService');
const logger = require('../utils/logger');
const { DateTime } = require('luxon');

/**
 * Fetch busy times for all bays on a specific date.
 * @param {string} dateStr - Date in 'YYYY-MM-DD' format.
 * @returns {Object} - Mapping of bay names to their busy intervals.
 */
async function fetchAllBaysBusyTimes(dateStr) {
    const busyTimes = {};

    for (const bayName in CALENDARS) {
        const calendarId = CALENDARS[bayName];
        if (!calendarId) continue;

        const busy = await calendarService.fetchBusyTimes(calendarId, dateStr);
        busyTimes[bayName] = busy;
    }

    return busyTimes;
}

/**
 * Determine available start times with maximum durations.
 * Excludes past slots if the date is today.
 * @param {string} dateStr - Date in 'YYYY-MM-DD' format.
 * @returns {Array} - List of available start times with max durations.
 */
async function getAvailableStartTimes(dateStr) {
    const openingHour = 10; // 10:00 AM
    const closingHour = 22; // 10:00 PM
    const maxDuration = 5;  // Maximum 5 hours

    const busyTimes = await fetchAllBaysBusyTimes(dateStr);

    // Initialize availability map for each bay
    const availabilityMap = {};

    for (const bayName in busyTimes) {
        availabilityMap[bayName] = {};
        for (let hour = openingHour; hour < closingHour; hour++) {
            availabilityMap[bayName][hour] = true; // Assume available
        }

        busyTimes[bayName].forEach(event => {
            const startHour = event.start.hour;
            const endHour = event.end.hour;
            for (let hour = startHour; hour < endHour; hour++) {
                if (hour >= openingHour && hour < closingHour) {
                    availabilityMap[bayName][hour] = false;
                }
            }
        });
    }

    // Determine if the selected date is today
    const now = DateTime.now().setZone('Asia/Bangkok');
    const isToday = now.toISODate() === dateStr;

    // Determine available start times with max durations
    const availableSlots = [];

        // If the date is today, set the earliest available hour
    let earliestHour = openingHour;
    if (isToday) {
        earliestHour = now.hour + 1; // Start from the next hour
        if (now.minute > 0) {
            earliestHour += 1; // If current time is past the hour, skip to the next
        }
        if (earliestHour >= closingHour) {
            // No slots available today
            return [];
        }
    }

    for (let startHour = earliestHour; startHour < closingHour; startHour++) {
        // If the date is today, exclude slots that have already started
        if (isToday && startHour < now.hour) {
            continue;
        }

        let slotMaxDuration = 0;

        for (let duration = 1; duration <= maxDuration; duration++) {
            const endHour = startHour + duration;
            if (endHour > closingHour) break; // Exceeds closing time

            let isAvailable = false;

            // Check if any bay is available for the entire duration
            for (const bayName in availabilityMap) {
                let bayAvailable = true;
                for (let hour = startHour; hour < endHour; hour++) {
                    if (!availabilityMap[bayName][hour]) {
                        bayAvailable = false;
                        break;
                    }
                }
                if (bayAvailable) {
                    isAvailable = true;
                    break;
                }
            }

            if (isAvailable) {
                slotMaxDuration = duration;
            } else {
                break; // No longer durations available
            }
        }

        if (slotMaxDuration > 0) {
            availableSlots.push({
                startTime: `${startHour.toString().padStart(2, '0')}:00`,
                maxDuration: slotMaxDuration,
            });
        }
    }

    return availableSlots;
}

/**
 * Get available slots, checking cache first.
 * @param {string} dateStr - Date in 'YYYY-MM-DD' format.
 * @returns {Array} - Available slots.
 */
async function getAvailableSlots(dateStr) {
    const cacheKey = `available_slots_${dateStr}`;

    try {
        // Check Redis cache for available slots using getCache
        const cachedSlots = await cacheService.getCache(cacheKey);
        if (cachedSlots) {
            logger.info(`Serving slots from Redis cache for ${dateStr}`);
            return cachedSlots; // getCache already parses JSON
        }

        // If not in cache, calculate available slots from Google Calendar
        const slots = await getAvailableStartTimes(dateStr);

        // Store the available slots in Redis for 10 minutes (600 seconds) using setCache
        await cacheService.setCache(cacheKey, slots, 600);

        return slots;
    } catch (error) {
        logger.error('Error accessing Redis:', error);
        throw error;
    }
}

/**
 * Assign a bay based on availability.
 * @param {string} dateStr - Date in 'YYYY-MM-DD' format.
 * @param {string} startTime - Start time in 'HH:mm' format.
 * @param {number} duration - Duration in hours.
 * @returns {Object|null} - Assigned bay and booking details.
 */
async function assignBay(dateStr, startTime, duration) {
    const busyTimes = await fetchAllBaysBusyTimes(dateStr);
    const bookingStart = DateTime.fromISO(`${dateStr}T${startTime}`, { zone: 'Asia/Bangkok' }).toUTC();
    const bookingEnd = bookingStart.plus({ hours: duration });

    for (const bayName in CALENDARS) {
        const isAvailable = busyTimes[bayName].every(event => {
            const eventStart = event.start;
            const eventEnd = event.end;
            return bookingEnd <= eventStart || bookingStart >= eventEnd;
        });

        if (isAvailable) {
            return {
                bay: bayName,
                interval: {
                    start: bookingStart.toISO(),
                    end: bookingEnd.toISO(),
                },
            };
        }
    }

    // No available bay found
    return null;
}

/**
 * Create a booking by inserting an event into Google Calendar and saving it to Firestore.
 * @param {Object} bookingData - Booking details.
 * @returns {Object|null} - Booking details or null if failed.
 */
async function createBooking(bookingData) {
    const { date, startTime, duration, userId, userName, phoneNumber, numberOfPeople, email, loginMethod } = bookingData;
  
    const assignedBay = await assignBay(date, startTime, duration);
  
    if (!assignedBay) {
      return null; // No available bay
    }
  
    const calendarId = CALENDARS[assignedBay.bay];
    const bookingStart = DateTime.fromISO(`${date}T${startTime}`, { zone: 'Asia/Bangkok' });
    const bookingEnd = bookingStart.plus({ hours: duration });
  
    const event = {
      summary: `${userName} (${phoneNumber}) (${numberOfPeople}) - ${assignedBay.bay}`,
      description: `Name: ${userName}\nEmail: ${email}\nPhone: ${phoneNumber}\nPeople: ${numberOfPeople}`,
      start: {
        dateTime: bookingStart.toUTC().toISO(),
        timeZone: 'UTC',
      },
      end: {
        dateTime: bookingEnd.toUTC().toISO(),
        timeZone: 'UTC',
      },
    };
  
    try {
      await calendarService.insertEvent(calendarId, event);
  
      // Save booking details to Firestore
      const bookingRef = db.collection('bookings').doc(); // Auto-generate ID
      bookingData.bookingId = bookingRef.id; // Add booking ID to data
      bookingData.bay = assignedBay.bay;
      bookingData.createdAt = admin.firestore.FieldValue.serverTimestamp(); // Timestamp
  
      logger.info(`Saving booking to Firestore with bookingId: ${bookingData.bookingId}`);
      await bookingRef.set(bookingData);
  
      // Send LINE notification
      const bookingDetails = {
        customerName: userName,
        email: email,
        phoneNumber: phoneNumber,
        bookingDate: date,
        bookingStartTime: bookingStart.toFormat('HH:mm'),
        bookingEndTime: bookingEnd.toFormat('HH:mm'),
        bayNumber: assignedBay.bay,
        duration: duration,
        numberOfPeople: numberOfPeople,
      };
  
      await lineNotifyService.sendBookingNotification(bookingDetails);
  
      logger.info(`Booking created successfully for userId: ${userId} at bay: ${assignedBay.bay}`);
  
      return bookingData;
    } catch (error) {
      logger.error('Error creating booking:', error);
      throw error;
    }
  }

/**
 * Get bookings for a specific user.
 * @param {string} userId - User ID.
 * @returns {Array} - List of bookings.
 */
async function getBookingsByUserId(userId) {
    try {
      const bookingsRef = db.collection('bookings').where('userId', '==', userId);
      const snapshot = await bookingsRef.get();
  
      if (snapshot.empty) {
        logger.info(`No bookings found for userId: ${userId}`);
        return [];
      }
  
      const bookings = [];
      snapshot.forEach(doc => {
        bookings.push({ bookingId: doc.id, ...doc.data() });
      });
  
      return bookings;
    } catch (error) {
      logger.error('Error fetching bookings:', error);
      throw error;
    }
  }
  
/**
 * Update a booking.
 * @param {string} bookingId - Booking ID.
 * @param {Object} updateData - Data to update.
 * @returns {boolean} - Success status.
 */
async function updateBooking(bookingId, updateData) {
    try {
      const bookingRef = db.collection('bookings').doc(bookingId);
      await bookingRef.update(updateData);
      logger.info(`Booking ${bookingId} updated successfully`);
      return true;
    } catch (error) {
      logger.error('Error updating booking:', error);
      throw error;
    }
  }

module.exports = {
    getAvailableSlots,
    getAvailableStartTimes,
    createBooking,
    getBookingsByUserId,
    updateBooking
};






==== controllers/BookingController.js ====

// controllers/bookingController.js

const bookingService = require('../services/bookingService');
const customerService = require('../services/customerService'); // Add this line
const logger = require('../utils/logger');


/**
 * Get available slots for a specific date, first checking the Redis cache.
 */
exports.getAvailableSlots = async (req, res) => {
    const dateStr = req.query.date; // Expected format: 'YYYY-MM-DD'

    if (!dateStr) {
        return res.status(400).json({ success: false, message: 'Date parameter is required.' });
    }

    try {
        const availableSlots = await bookingService.getAvailableSlots(dateStr);
        return res.status(200).json({ success: true, availableSlots });
    } catch (error) {
        logger.error('Error fetching available slots:', error);
        return res.status(500).json({ success: false, message: 'Internal Server Error.' });
    }
};

/**
 * Book a slot for a user.
 */
exports.bookSlot = async (req, res) => {
    const {
      userId,
      userName,
      email,
      phoneNumber,
      numberOfPeople,
      date,
      startTime,
      duration,
      loginMethod,
    } = req.body;
  
    // Adjusted validation
    const requiredFields = [userId, userName, phoneNumber, numberOfPeople, date, startTime, duration, loginMethod];

    if (requiredFields.some(field => field == null || field === '')) {
        return res.status(400).json({ success: false, message: 'Missing required booking parameters.' });
    }
  
    if (duration < 1 || duration > 5) {
      return res.status(400).json({ success: false, message: 'Duration must be between 1 and 5 hours.' });
    }

   
    console.log('Booking request received with body:', req.body);
  
    try {
      const bookingData = {
        userId,
        userName,
        email,
        phoneNumber,
        numberOfPeople,
        date,
        startTime,
        duration,
        loginMethod,
      };
  
      const booking = await bookingService.createBooking(bookingData);
  
      if (!booking) {
        return res.status(409).json({ success: false, message: 'No available bays for the selected time and duration.' });
      }
  
      // Save or update customer data with the latest phone number and email
      await customerService.saveOrUpdateCustomerData({
        userId,
        name: userName,
        email,
        phoneNumber,
        loginSource: loginMethod,
      });
  
      return res.status(200).json({
        success: true,
        message: `Booking confirmed for ${booking.bay} from ${booking.startTime} for ${booking.duration} hour(s).`,
        bookingDetails: booking,
      });
    } catch (error) {
      logger.error('Error processing booking:', error);
      return res.status(500).json({ success: false, message: 'Internal Server Error.' });
    }
    
  };

exports.getUserBookings = async (req, res) => {
    const userId = req.user.userId;
  
    try {
      const bookings = await bookingService.getBookingsByUserId(userId);
      return res.status(200).json({ success: true, bookings });
    } catch (error) {
      logger.error('Error fetching user bookings:', error);
      return res.status(500).json({ success: false, message: 'Internal Server Error.' });
    }
  };
  



==== routes/api/bookingRoutes.js ====

// routes/api/bookingRoutes.js

const express = require('express');
const router = express.Router();
const bookingController = require('../../controllers/bookingController');
const authMiddleware = require('../../middlewares/authMiddleware');

/**
 * @route GET /api/bookings/available-slots
 * @desc Get available booking slots for a specific date
 */
router.get('/available-slots', authMiddleware, bookingController.getAvailableSlots);

/**
 * @route POST /api/bookings/book-slot
 * @desc Book a slot
 */
router.post('/book-slot', authMiddleware, bookingController.bookSlot);

// Get bookings for the authenticated user
router.get('/my-bookings', authMiddleware, bookingController.getUserBookings);

module.exports = router;


